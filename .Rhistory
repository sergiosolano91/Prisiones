# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
ggplotly(grafica)
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_gen %<>% mutate (fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
ggplotly(grafica)
# setwd("/home/sergio/Prisiones")
# rm(list=ls())
data = read.csv("POB_SIT.csv",header = FALSE,sep = ",",stringsAsFactors=FALSE)
POB = as.integer(c(unlist(data[2:13,2:dim(data)[2]])))
SIN = c(rep(c(rep(0,12),rep(1,12),rep(2,12)),900/36))
POB_SIN = cbind(POB,SIN)
SIND = subset(POB_SIN,POB_SIN[,"SIN"]==0)
MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==0)
MPP = MPP1[76:296,"POB"]
##### SERIES DE TIEMPO
#MPP = Male Prison Population
MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
logMMPtimeseries <- log(MPPtimeseries)
plot.ts(diff(logMMPtimeseries))
DeltaMPP = decompose(diff(logMMPtimeseries))
plot(DeltaMPP)
# ggplot(DeltaMPP)
write.csv(DeltaMPP$trend, file = 'sindicados.txt', row.names = TRUE)
# Crecimiento promedio
mean(DeltaMPP$trend,na.rm = TRUE)*100
####### CONDENADOS
MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==1)
MPP = MPP1[76:296,"POB"]
##### SERIES DE TIEMPO
#MPP = Male Prison Population
MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
logMMPtimeseries <- log(MPPtimeseries)
plot.ts(diff(logMMPtimeseries))
#ggplot(yt.views, aes(Date, Views)) + geom_line() +
#  scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
DeltaMPP = decompose(diff(logMMPtimeseries))
plot(DeltaMPP)
# ggplot(DeltaMPP)
write.csv(DeltaMPP$trend, file = 'condenados.txt', row.names = TRUE)
# Crecimiento promedio
mean(DeltaMPP$trend,na.rm = TRUE)*100
####### TOTAL
MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==2)
MPP = MPP1[76:296,"POB"]
##### SERIES DE TIEMPO
#MPP = Male Prison Population
MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
logMMPtimeseries <- log(MPPtimeseries)
plot.ts(diff(logMMPtimeseries))
DeltaMPP = decompose(diff(logMMPtimeseries))
plot(DeltaMPP)
# ggplot(DeltaMPP)
write.csv(DeltaMPP$trend, file = 'condenados.txt', row.names = TRUE)
# Crecimiento promedio
mean(DeltaMPP$trend,na.rm = TRUE)*100
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
grafica
grafica
ggplotly(grafica)
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
autoplot(as.zoo(DeltaMPP$seasonal), geom = "line") + autoplot(as.zoo(DeltaMPP$trend), geom = "line") + ylab("tasa de crecimiento - componente estacional") + xlab("Periodo") -> graf_estacionalidad
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library ("timeSeries")
library ("ggplot2")
library("dplyr")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
autoplot(as.zoo(DeltaMPP$seasonal), geom = "line") + autoplot(as.zoo(DeltaMPP$trend), geom = "line") + ylab("tasa de crecimiento - componente estacional") + xlab("Periodo") -> graf_estacionalidad
autoplot(merge(as.zoo(DeltaMPP$trend),as.zoo(DeltaMPP$random)), geom = "line") + ylab("tasa de crecimiento - tendencia") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(merge(as.zoo(DeltaMPP$trend),as.zoo(DeltaMPP$random), as.zoo(DeltaMPP$seasonal)), geom = "line") + ylab("tasa de crecimiento - tendencia") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(merge(as.zoo(tendencia,as.zoo(DeltaMPP$random), as.zoo(DeltaMPP$seasonal)), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
tendencia <- as.zoo(DeltaMPP$trend)
autoplot(merge(as.zoo(tendencia,as.zoo(DeltaMPP$random), as.zoo(DeltaMPP$seasonal)), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(merge(tendencia,as.zoo(DeltaMPP$random), as.zoo(DeltaMPP$seasonal)), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(merge(tendencia,estacional, aleatorio)), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio)), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=4/3) -> graf_crecimiento
graf_crecimiento
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library ("timeSeries")
library ("ggplot2")
library("dplyr")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# # setwd("/home/sergio/Prisiones")
# # rm(list=ls())
# data = read.csv("POB_SIT.csv",header = FALSE,sep = ",",stringsAsFactors=FALSE)
#
# POB = as.integer(c(unlist(data[2:13,2:dim(data)[2]])))
#
# SIN = c(rep(c(rep(0,12),rep(1,12),rep(2,12)),900/36))
#
# POB_SIN = cbind(POB,SIN)
#
# SIND = subset(POB_SIN,POB_SIN[,"SIN"]==0)
#
#
# MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==0)
# MPP = MPP1[76:296,"POB"]
#
# ##### SERIES DE TIEMPO
# #MPP = Male Prison Population
#
# MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
#
# logMMPtimeseries <- log(MPPtimeseries)
#
# plot.ts(diff(logMMPtimeseries))
# plot(DeltaMPP)
#
# # ggplot(DeltaMPP)
#
# write.csv(DeltaMPP$trend, file = 'sindicados.txt', row.names = TRUE)
#
# # Crecimiento promedio
# mean(DeltaMPP$trend,na.rm = TRUE)*100
#
# ####### CONDENADOS
# MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==1)
# MPP = MPP1[76:296,"POB"]
#
# ##### SERIES DE TIEMPO
# #MPP = Male Prison Population
#
# MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
#
# logMMPtimeseries <- log(MPPtimeseries)
#
# plot.ts(diff(logMMPtimeseries))
#
# #ggplot(yt.views, aes(Date, Views)) + geom_line() +
# #  scale_x_date(format = "%b-%Y") + xlab("") + ylab("Daily Views")
#
# DeltaMPP = decompose(diff(logMMPtimeseries))
# plot(DeltaMPP)
# # ggplot(DeltaMPP)
# write.csv(DeltaMPP$trend, file = 'condenados.txt', row.names = TRUE)
#
# # Crecimiento promedio
# mean(DeltaMPP$trend,na.rm = TRUE)*100
#
# ####### TOTAL
# MPP1 = subset(POB_SIN,POB_SIN[,"SIN"]==2)
# MPP = MPP1[76:296,"POB"]
#
# ##### SERIES DE TIEMPO
# #MPP = Male Prison Population
#
# MPPtimeseries <- ts(MPP, frequency=12, start=c(1991,1))
#
# logMMPtimeseries <- log(MPPtimeseries)
#
# plot.ts(diff(logMMPtimeseries))
# DeltaMPP = decompose(diff(logMMPtimeseries))
# plot(DeltaMPP)
# # ggplot(DeltaMPP)
# write.csv(DeltaMPP$trend, file = 'condenados.txt', row.names = TRUE)
#
# # Crecimiento promedio
# mean(DeltaMPP$trend,na.rm = TRUE)*100
knitr::opts_chunk$set(echo = TRUE)
w = rnorm (500,0,1)
v = filter(w, sides = 2, rep(1/3,3))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
w = rnorm (500,0,1)
v = filter(w, sides = 2, rep(1/3,3))
par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
plot.ts(v, main = "moving average")
par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
plot.ts(v, main = "moving average")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
w = rnorm (500,0,1)
v = filter(w, sides = 2, rep(1/3,3))
# par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
plot.ts(v, main = "moving average")
plot.ts(w,main = "white noise")
plot.ts(v, main = "moving average")
par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
w = rnorm (500,0,1)
v = filter(w, sides = 2, rep(1/3,3))
par(mfrow=c(2,1))
plot.ts(w,main = "white noise")
plot.ts(v, main = "moving average")
plot.ts(x, main = "autoregression")
w = rnorm(550,0,1)
x = filter (w, filter()1,-0.9), method = "recursive")[-(1:50)]
x = filter (w, filter()1,-0.9), method = "recursive")
x = filter (w, filter = c(1,-0.9), method = "recursive")[-(1:50)]
plot.ts(v, main = "moving average")
x = filter (w, filter = c(1,0), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
w = rnorm(550,0,1)
x = filter (w, filter = c(1,0), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,0), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,0), method = "recursive")
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,0), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,0), method = "recursive")[-(1:200)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,0), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,0.9), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,-0.9), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,0.9), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,0.1), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,2), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0.1,2), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(0,2), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(-1,1), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
x = filter (w, filter = c(1,-0.9), method = "recursive")[-(1:50)]
plot.ts(x, main = "autoregression")
set.seed(154)
w = rnorm(200,0,1); x = cumsum (w)
wd = w + .2; xd = cumsum(wd)
?cumsum()
cumsum(1:10)
cummin(c(3:1, 2:0, 4:2))
plot.ts(xd, ylim = (-5,55), main = "random walk")
plot.ts(xd, ylim = (-5,55), main = "random walk")
plot.ts(xd, ylim = c(-5,55), main = "random walk")
set.seed(154)
w = rnorm(200,0,1); x = cumsum (w)
wd = w + .2; xd = cumsum(wd)
plot.ts(xd, ylim = c(-5,55), main = "random walk")
lines(x); lines(0.2*(1:200), lty = "dashed")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library("astsa")
plot(AirPassengers)
start(AirPassengers)
end(AirPassengers)
time(AirPassengers)
deltat(AirPassengers)
frequency(AirPassengers)
cycle(AirPassengers)
plot(AirPassengers)
# Check whether eu_stocks is a ts object
is.ts(eu_stocks)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library("astsa")
acf(soi, 48, main = "Southern Oscilation Index")
acf(speech, 250)
par(mfrow=c(3,1))
2 acf(soi, 48, main="Southern Oscillation Index") 3 acf(rec, 48, main="Recruitment")
acf(soi, 48, main="Southern Oscillation Index") 3 acf(rec, 48, main="Recruitment")
acf(soi, 48, main="Southern Oscillation Index")
par(mfrow=c(3,1))
acf(soi, 48, main="Southern Oscillation Index")
acf(rec, 48, main="Recruitment")
ccf(soi, rec, 48, main="SOI vs Recruitment", ylab="CCF")
print(data_vector)
persp(1:64, 1:36, soiltemp, phi=30, theta=30, scale=FALSE, expand=4, ticktype="detailed", xlab="rows", ylab="cols", zlab="temperature")
plot.ts(rowMeans(soiltemp), xlab="row", ylab="Average Temperature")
library("xts")
installed.packages("xts")
install.packages("xts")
library("astsa")
library("xts")
# View a detailed description of AirPassengers
help(AirPassengers)
# Plot AirPassengers
ts.plot(AirPassengers)
# Plot the DJIA daily closings
ts.plot(djia$Close)
# Plot the Southern Oscillation Index
plot(soi)
# Plot GNP series (gnp) and its growth rate
par(mfrow = c(2,1))
plot(gnp)
plot(diff(log(gnp)))
# Plot DJIA closings (djia$Close) and its returns
par(mfrow = c(2,1))
plot(djia$Close)
plot(diff(log(djia$Close)))
# Generate 100 observations from the AR(1) model
x <- arima.sim(model = list(order = c(1, 0, 0), ar = .9), n = 100)
# Plot the generated data
plot(x)
# Plot the sample P/ACF pair
par(mfrow = c(2,1))
acf(x)
pacf(x)
# Fit an AR(1) to the data and examine the -table
sarima(x, 1, 0, 0)
