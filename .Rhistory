# Condenados
ppl_sitjur %>% dplyr::filter(categoria == "condenados", !(is.na(valor))) -> ppl_conde
ppl_conde <- ppl_conde$valor
ts_conde <- ts(ppl_conde, start = 1991, frequency = 12)
error = 2/sqrt(length(ppl_conde))
## Población total
# Calcular acf y pacf
acf_total <- as.data.frame(acf2(diff(diff(ts_total), lag = 12), max.lag = 60))
# Gráfica acf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity", fill = "steelblue") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("ACF Población total") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal()-> graf_acf_total
# Gráfica pacf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity", fill = "steelblue") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población total") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal() -> graf_pacf_total
## Población sindicada
# Calcular acf y pacf
acf_sindi <- as.data.frame(acf2(diff(diff(ts_sindi), lag = 12), max.lag = 60))
# Gráfica acf sindicados
acf_sindi %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity", fill = "steelblue1") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("ACF Población sindicada") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal() -> graf_acf_sindi
# Gráfica pacf sindicados
acf_sindi %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity", fill = "steelblue1") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población sindicada") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal() -> graf_pacf_sindi
## Población condenada
# Calcular acf y pacf
acf_conde <- as.data.frame(acf2(diff(diff(ts_conde), lag = 12), max.lag = 60))
# Gráfica acf condenados
acf_conde %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity", fill = "steelblue2") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("ACF Población condenada") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal() -> graf_acf_conde
# Gráfica pacf condenados
acf_conde %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity", fill = "steelblue2") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población condenada") + ylim(c(-0.55,0.55)) + geom_hline(aes(yintercept = error), colour = "royalblue", linetype="dashed") + geom_hline(aes(yintercept = -error), colour = "royalblue", linetype="dashed") + theme_minimal() -> graf_pacf_conde
#png(file = 'ACF_var_pob.png', height = 750, width = 500, res = 85)
ACF_var_pob <- grid.arrange(graf_acf_total, graf_pacf_total,graf_acf_sindi, graf_pacf_sindi,graf_acf_conde, graf_pacf_conde, ncol = 2)
ACF_var_pob
#dev.copy(png,'ACF_var_pob')
#dev.off()
# Chunk 25: estima_arima
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
# Chunk 26: estima_arima_2
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
# Chunk 27: pry_arima_2
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,2, S = 12)
# Chunk 28: ACF_sin
ppl_sitjur %>% dplyr::filter(categoria == "sindicados", !(is.na(valor))) -> ppl_sin
ppl_sin <- ppl_sin$valor
ts_sin <- ts(ppl_sin, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_sin), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población sindicada desestacionalizado")
plot(pacf(diff(diff(ts_sin), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población sindicada desestacionalizado")
# Chunk 29: pry_arima_sin
forecast <- sarima.for(ts_sin,n.ahead = 36, 1,1,1,0,0,1, S = 12)
# Chunk 30: ACF_con
ppl_sitjur %>% dplyr::filter(categoria == "condenados", !(is.na(valor))) -> ppl_con
ppl_con <- ppl_con$valor
ts_con <- ts(ppl_con, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
acf <- plot (acf(diff(diff(ts_con), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población condenada desestacionalizado")
plot(pacf(diff(diff(ts_con), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC acf Variación de la población condenada desestacionalizado")
# Chunk 31: pry_arima_con
forectast <- sarima.for(ts_con,n.ahead = 36, 1,1,1,0,0,1, S = 12)
# Chunk 32: var
#####Modelos VAR
# ts_sincon <- cbind (diff(ts_sin), diff(ts_con))
# VARselect(ts_sincon, lag.max=9, type="const")
# ts_sincon_mod <- VAR(ts_sincon,p = 1)
# forecast_var <- predict(ts_sincon_mod, n.ahead = 60)
# ts_sincon_mod
# forecast_var
#
# # Cite packages
# if(nchar(system.file(package="astsa"))) citation("astsa")
# Chunk 33: Estimación pob total
### Total 111002
png(file = 'Arima_total_111002.png', height = 750, width = 500, res = 85)
arima_total_1 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
dev.off()
### Total 111001
png(file = 'Arima_total_111001.png', height = 750, width = 500, res = 85)
arima_total_2 <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
dev.off()
auto.arima(ts_total)
### Total Auto Arima
png(file = 'Arima_total_321002.png', height = 750, width = 500, res = 85)
arima_total_3 <- sarima(ts_total,3,2,1,0,0,2, S = 12, details = FALSE)
dev.off()
auto.arima(ts_total, ic = "aic")
### Total 121002
png(file = 'Arima_total_121002.png', height = 750, width = 500, res = 85)
arima_total_4 <- sarima(ts_total,1,2,1,0,0,2, S = 12, details = FALSE)
dev.off()
Indicadores <- matrix(c(arima_total_1$AIC,arima_total_1$BIC,arima_total_2$AIC,arima_total_2$BIC,arima_total_3$AIC,arima_total_3$BIC,arima_total_4$AIC,arima_total_4$BIC),ncol = 2)
AIC_total <- AIC(arima_total_1$fit,arima_total_2$fit, arima_total_3$fit,arima_total_4$fit)
BIC_total <- BIC(arima_total_1$fit,arima_total_2$fit, arima_total_3$fit,arima_total_4$fit)
Indicadores_df <- cbind(c("(1,1,1,0,0,2)","(1,1,1,0,0,1)","(3,2,1,0,0,2)","(1,2,1,0,0,2)"),round(AIC_total$AIC,2), round(BIC_total$BIC,2))
colnames(Indicadores_df) <- c("ORDEN","AIC","BIC")
#xtable(Indicadores_df)
#xtable(arima_total_4$ttable)
#xtable(arima_total_4$ttable, label = "parámetros_121002", caption = "Parámetros del modelo (1,2,1,0,0,2)")
# Chunk 34: Estimación pob sindicada
### sindicado 111001
png(file = 'Arima_sindi_11101.png', height = 750, width = 500, res = 85)
arima_sindi_1 <- sarima(ts_sindi,1,1,1,0,0,1, S = 12, details = FALSE)
dev.off()
### sindicado 211001
png(file = 'Arima_sindi_211001.png', height = 750, width = 500, res = 85)
arima_sindi_2 <- sarima(ts_sindi,2,1,1,0,0,1, S = 12, details = FALSE)
dev.off()
auto.arima(ts_sindi, ic = "aic")
### sindicado Auto Arima
png(file = 'Arima_sindi_012001.png', height = 750, width = 500, res = 85)
arima_sindi_3 <- sarima(ts_sindi,0,1,2,0,0,1, S = 12, details = FALSE)
dev.off()
### Total 121002
png(file = 'Arima_sindi_011000.png', height = 750, width = 500, res = 85)
arima_sindi_4 <- sarima(ts_sindi,0,1,1,0,0,0, S = 12, details = FALSE)
dev.off()
AIC_sindi <- AIC(arima_sindi_1$fit,arima_sindi_2$fit, arima_sindi_3$fit,arima_sindi_4$fit)
BIC_sindi <- BIC(arima_sindi_1$fit,arima_sindi_2$fit, arima_sindi_3$fit,arima_sindi_4$fit)
Indicadores_df_sindi <- cbind(c("(1,1,1,0,0,1)","(2,1,1,0,0,1)","(0,1,2,0,0,1)","(0,1,1,0,0,0)"),round(AIC_sindi$AIC,2), round(BIC_sindi$BIC,2))
colnames(Indicadores_df_sindi) <- c("ORDEN","AIC","BIC")
xtable(Indicadores_df_sindi)
#xtable(arima_total_4$ttable)
xtable(arima_sindi_3$ttable, label = "parámetros_sindi_011001", caption = "Parámetros del modelo (0,1,1,0,0,1)")
# Chunk 35: Estimación pob condenada
### condenada 111001
png(file = 'Arima_conde_111001.png', height = 750, width = 500, res = 85)
arima_conde_1 <- sarima(ts_conde,1,1,1,0,0,1, S = 12, details = FALSE)
dev.off()
### condenado 211001
png(file = 'Arima_conde_211001.png', height = 750, width = 500, res = 85)
arima_conde_2 <- sarima(ts_conde,2,1,1,0,0,1, S = 12, details = FALSE)
dev.off()
auto.arima(ts_conde, ic = "aic")
### condenado Auto Arima
png(file = 'Arima_conde_012001.png', height = 750, width = 500, res = 85)
arima_conde_3 <- sarima(ts_conde,0,1,2,0,0,1, S = 12, details = FALSE)
dev.off()
### Total 121002
png(file = 'Arima_conde_011000.png', height = 750, width = 500, res = 85)
arima_conde_4 <- sarima(ts_conde,0,1,1,0,0,0, S = 12, details = FALSE)
dev.off()
AIC_conde <- AIC(arima_conde_1$fit,arima_conde_2$fit, arima_conde_3$fit,arima_conde_4$fit)
BIC_conde <- BIC(arima_conde_1$fit,arima_conde_2$fit, arima_conde_3$fit,arima_conde_4$fit)
Indicadores_df_conde <- cbind(c("(1,1,1,0,0,1)","(2,1,1,0,0,1)","(0,1,1,0,0,1)","(0,1,1,0,0,0)"),round(AIC_conde$AIC,2), round(BIC_conde$BIC,2))
colnames(Indicadores_df_conde) <- c("ORDEN","AIC","BIC")
xtable(Indicadores_df_conde)
#xtable(arima_total_4$ttable)
xtable(arima_conde_1$ttable, label = "parámetros_conde_111001", caption = "Parámetros del modelo (1,1,1,0,0,1)")
# Chunk 36: ajustar series a dic 2016
#se retira enero de 2017
ts_total <- ts(ts_total[1:312], start = c(1991,1), frequency = 12)
ts_sindi <- ts(ts_sindi[1:312], start = c(1991,1), frequency = 12)
ts_conde <- ts(ts_conde[1:312], start = c(1991,1), frequency = 12)
# Chunk 37: errores pob total
# Ejecutar mejor modelo
arima_total_4 <- sarima(ts_total,1,2,1,0,0,2, S = 12, details = FALSE)
# Estraer residuales
residuales_arima_total_4 <- arima_total_4$fit$residuals
# Filtrar contra un umbral
residuales_out_arima_total_4 <- 1*(abs(residuales_arima_total_4)>(sqrt(arima_sindi_3$fit$sigma2)*3))
#Transformar a matriz Dummy
outliers <- t(as.data.frame(residuales_out_arima_total_4))
outliersdiag <-t(outliers)%*%as.matrix(outliers)*diag(dim(outliers)[2])
A <- outliersdiag
outliersdiagdummy <- as.matrix(A[,A[row(A)==col(A)]==1])
# Generar nuevo modelo
arima_total_4_dummy <- sarima(ts_total,1,2,1,0,0,2, S = 12, xreg = outliersdiagdummy , details = FALSE)
# seleccionar el mejor modelo con los nuevos datos
arima_select <- auto.arima(ts_total,ic = "aic", xreg = outliersdiagdummy)
png(file = 'Arima_total_211200Dummy.png', height = 750, width = 500, res = 85)
arima_total_4_dummy <- sarima(ts_total,2,1,1,2,0,0, S = 12, xreg = outliersdiagdummy , details = FALSE)
dev.off()
arima_total_4_dummystats <- stats::arima(x = ts_total, order = c(2, 1, 1), seasonal = list(order = c(2, 0, 0), period = 12), xreg = outliersdiagdummy , include.mean = TRUE, optim.control = list(trace = 1))
pry_dummy = matrix(0,36,dim(outliersdiagdummy)[2])
forecast_dummy_total <- predict(arima_total_4_dummystats, n.ahead = 36, newxreg = pry_dummy)
# Chunk 38: errores pob sindicada
# Ejecutar mejor modelo
arima_sindi_3 <- sarima(ts_sindi,0,1,2,0,0,1, S = 12, details = FALSE)
# Estraer residuales
residuales_arima_sindi_3 <- arima_sindi_3$fit$residuals
# Filtrar contra un umbral
residuales_out_arima_sindi_3 <- 1*(abs(residuales_arima_sindi_3)>(sqrt(arima_sindi_3$fit$sigma2)*3))
#Transformar a matriz Dummy
outliers <- t(as.data.frame(residuales_out_arima_sindi_3))
outliersdiag <-t(outliers)%*%as.matrix(outliers)*diag(dim(outliers)[2])
A <- outliersdiag
outliersdiagdummy <- as.matrix(A[,A[row(A)==col(A)]==1])
# Generar nuevo modelo
arima_sindi_3_dummy <- sarima(ts_sindi,0,1,2,0,0,1, S = 12, xreg = outliersdiagdummy , details = FALSE)
# seleccionar el mejor modelo con los nuevos datos
arima_select <- auto.arima(ts_sindi,ic = "aic", xreg = outliersdiagdummy)
png(file = 'Arima_sindi_012001Dummy.png', height = 750, width = 500, res = 85)
arima_sindi_3_dummy <- sarima(ts_sindi,0,1,2,0,0,1, S = 12, xreg = outliersdiagdummy , details = FALSE)
dev.off()
arima_sindi_3_dummystats <- stats::arima(x = ts_sindi, order = c(0, 1, 2), seasonal = list(order = c(0, 0, 1), period = 12), xreg = outliersdiagdummy , include.mean = TRUE, optim.control = list(trace = 1))
pry_dummy = matrix(0,36,dim(outliersdiagdummy)[2])
forecast_dummy_sindi <- predict(arima_sindi_3_dummystats, n.ahead = 36, newxreg = pry_dummy)
# Chunk 39: errores pob condenada
# Ejecutar mejor modelo
arima_conde_1 <- sarima(ts_sindi,1,1,1,0,0,1, S = 12, details = FALSE)
# Estraer residuales
residuales_arima_conde_1 <- arima_conde_1$fit$residuals
# Filtrar contra un umbral
residuales_out_arima_conde_1 <- 1*(abs(residuales_arima_sindi_3)>(sqrt(arima_conde_1$fit$sigma2)*3))
#Transformar a matriz Dummy
outliers <- t(as.data.frame(residuales_out_arima_conde_1))
outliersdiag <-t(outliers)%*%as.matrix(outliers)*diag(dim(outliers)[2])
A <- outliersdiag
outliersdiagdummy <- as.matrix(A[,A[row(A)==col(A)]==1])
# Generar nuevo modelo
arima_conde_1_dummy <- sarima(ts_conde,1,1,1,0,0,1, S = 12, xreg = outliersdiagdummy , details = FALSE)
# seleccionar el mejor modelo con los nuevos datos
arima_select <- auto.arima(ts_conde,ic = "aic", xreg = outliersdiagdummy)
arima_conde_1_dummy <- sarima(ts_conde,1,1,1,0,0,1, S = 12, xreg = outliersdiagdummy , details = FALSE)
arima_conde_1_dummystats <- stats::arima(x = ts_conde, order = c(1, 1, 1), seasonal = list(order = c(0, 0, 1), period = 12), xreg = outliersdiagdummy , include.mean = TRUE, optim.control = list(trace = 1))
residuales_arima_conde_11 <- arima_conde_1_dummy$fit$residuals
# Filtrar contra un umbral
residuales_out_arima_conde_1 <- (abs(residuales_arima_conde_11)>2000)*1
#Transformar a matriz Dummy
outliers <- t(as.data.frame(residuales_out_arima_conde_1))
outliersdiag <-t(outliers)%*%as.matrix(outliers)*diag(dim(outliers)[2])
A <- outliersdiag
outliersdiagdummy1 <- as.matrix(A[,A[row(A)==col(A)]==1])
outliersdiagdummys <- cbind(outliersdiagdummy1,outliersdiagdummy)
# Generar nuevo modelo
arima_conde_1_dummy1 <- sarima(ts_conde,1,1,1,0,0,1, S = 12, xreg = outliersdiagdummys , details = FALSE)
# seleccionar el mejor modelo con los nuevos datos
arima_select <- auto.arima(ts_conde,ic = "aic", xreg = outliersdiagdummys)
png(file = 'Arima_conde_111001Dummy.png', height = 750, width = 500, res = 85)
arima_conde_1_dummy <- sarima(ts_conde,1,1,1,0,0,1, S = 12, xreg = outliersdiagdummys , details = FALSE)
dev.off()
arima_conde_1_dummystats <- stats::arima(x = ts_conde, order = c(1, 1, 1), seasonal = list(order = c(0, 0, 1), period = 12), xreg = outliersdiagdummys , include.mean = TRUE, optim.control = list(trace = 1))
# Pryectar
pry_dummy = matrix(0,36,dim(outliersdiagdummys)[2])
forecast_dummy_conde <- predict(arima_conde_1_dummystats, n.ahead = 36, newxreg = pry_dummy)
# Chunk 40: gráfica forecast total
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 1,2,1,0,0,2, S = 12)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo") + ylab("Población carcelaria total") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_4
graf_pry_total_4
ggsave("graf_pry_total_4.png")
# Chunk 41: gráfica forecast total dummy
# Proyección
forecast <- forecast_dummy_total
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo") + ylab("Población carcelaria total") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_4
graf_pry_total_4
ggsave("graf_pry_total_4_dummy.png")
# Chunk 42: gráfica forecast sindicados
# Proyección debe usar versión 1.8
forecast <- sarima.for(ts_sindi,n.ahead = 36, 0,1,2,0,0,1, S = 12 )
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3.png")
# Chunk 43: gráfica forecast sindicados dummy
# Proyección debe usar versión 1.8
forecast <- forecast_dummy_sindi
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3_dummy.png")
# Chunk 44: gráfica forecast condenados
# Proyección
forecast <- sarima.for(ts_conde,n.ahead = 36, 1,1,1,0,0,1, S = 12)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_conde), date=as.Date(as.yearmon(time(ts_conde))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria condenada") + theme_minimal()+ theme(legend.title=element_blank()) -> graf_pry_conde_1
graf_pry_conde_1
ggsave("graf_pry_conde_1.png")
# Chunk 45: gráfica forecast condenados dummy
# Proyección
forecast <- forecast_dummy_conde
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_conde), date=as.Date(as.yearmon(time(ts_conde))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria condenada") + theme_minimal()+ theme(legend.title=element_blank()) -> graf_pry_conde_1
graf_pry_conde_1
ggsave("graf_pry_conde_1_dummy.png")
# Chunk 46: descargar datos rc
# url <- "https://www.dropbox.com/s/94oblxtlc8anlk1/PRY_POB_NAL_DANE_EDAD.csv?dl=1"
# destfile <- "POB_NAL_DAN_EDAD.csv"
# curl_download(url, destfile)
# Chunk 47: POB_NAL_EDAD
# pob_nal_dane_edad = read.csv("POB_NAL_DAN_EDAD.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
#
# pob_nal_dane_edad %<>% gather(Rango_edad, Poblacion, -Año, -Grupos.de.edad) %>% spread(Grupos.de.edad, Poblacion)
#
# pob_nal_dane_edad %<>% dplyr::filter(Año>1990)
#
# pob_nal_dane_edad$Rango_edad<- gsub("X","",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("\\.","-",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("0-4","00-04",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("400-044","40-44",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("5-9","05-09",pob_nal_dane_edad$Rango_edad)
#
# pob_nal_dane_edad %>% ggplot(aes(x=Año, y = Total/1000000, fill = Rango_edad)) + geom_area(stat="identity") + theme_minimal() + ylab("Proyecciones de población nacional (MM)") + scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(17)) + theme(legend.position="none") -> pob_total_edad_stack
#
# pob_nal_dane_edad %>% ggplot(aes(x=Año, y = Total/1000000, colour = Rango_edad)) + geom_line() + theme_minimal() + ylab("Proyecciones de población nacional (MM)") + scale_colour_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(17)) + theme(legend.position="none") -> pob_total_edad
#
# ### Crear columna de participación
#
# pob_nal_dane_edad %<>% group_by(Año) %>% summarise(Totales_año = sum(Total)) %>% right_join(pob_nal_dane_edad, by = NULL) %>% mutate (Participacion= Total/Totales_año*100)
#
# pob_nal_dane_edad %>% ggplot(aes(x=Año, y = Participacion, fill = Rango_edad)) + geom_area(stat="identity") + theme_minimal() + ylab("Proyecciones de población nacional (%)") + scale_fill_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(17)) -> pob_total_edad_stack_part
#
# pob_nal_dane_edad %>% ggplot(aes(x=Año, y = Participacion, colour = Rango_edad)) + geom_line() + theme_minimal() + ylab("Proyecciones de población nacional (%)") + scale_colour_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(17)) -> pob_total_edad_part
#
# # Generar gráfica
# #png(file = 'POB_NAL_EDAD.png', height = 850, width = 600, res = 85)
# POB_NAL_EDAD <- grid.arrange(pob_total_edad_stack, pob_total_edad_stack_part,pob_total_edad, pob_total_edad_part, ncol = 2)
# POB_NAL_EDAD
# #dev.off()
# Chunk 48: REG_POB_NAL_EDAD
# # Cargar datos
# pob_nal_dane_edad = read.csv("POB_NAL_DAN_EDAD.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
#
# # cambiar estructura donde el genero es columna y los gruposde edad es fila
# pob_nal_dane_edad %<>% gather(Rango_edad, Poblacion, -Año, -Grupos.de.edad) %>% spread(Grupos.de.edad, Poblacion)
#
# pob_nal_dane_edad %<>% dplyr::filter(Año>1990)
#
# # Corregir titulos de rango etario
# pob_nal_dane_edad$Rango_edad<- gsub("X","",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("\\.","-",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("0-4","00-04",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("400-044","40-44",pob_nal_dane_edad$Rango_edad)
# pob_nal_dane_edad$Rango_edad<- gsub("5-9","05-09",pob_nal_dane_edad$Rango_edad)
#
# # Población DANE por edad
# pob_nal_dane_edad %>% dplyr::select(Año, Rango_edad, Total) %>% tidyr::spread(Rango_edad, Total) -> pob_dane_edad
#
# # Acumular rangos etarios que se trabajan acumulados
# Menor_14 <-apply(pob_dane_edad[,2:4],1,sum)
# Mayor_60 <- apply(pob_dane_edad[,16:18],1,sum)
#
# # Crear arreglo de regresores
# Regresores <- cbind(Menor_14,pob_dane_edad[,5:15],Mayor_60)
#
# # Calcular población total
# Pob_total <- apply(Regresores,1,sum)
#
# # Población total en mayo de cada año
# ppl_sitjur %>% dplyr::filter(categoria =="total", mes == 5, !is.na(valor)) %>% dplyr::select(valor, anio) -> pob_inpec_total
#
# # Calcular tasa de encarcelamiento
# registros <- dim(pob_inpec_total)[1]
# tasa_encar <- pob_inpec_total[,1]/Pob_total[1:registros]
#
#
#
# # Guardar modelo de regresión
# tasa_regresores <- cbind(tasa_encar = pob_inpec_total[,1],Regresores[1:registros,])
#
# # Salvar
# write.table(tasa_regresores,"tasa_regresores.csv",sep=",",row.names = FALSE)
# Chunk 49: REGRESION
# tasa_regresores <- read.table("tasa_regresores.csv", sep = ",", header = TRUE)
#
# ddist <- datadist(tasa_regresores)
# options(datadst = "ddist")
#
# reg <- lm(tasa_encar ~ -1 + X15.19 + X20.24  + X20.24 + X25.29 + X30.34 + X35.39 + X40.44 + X45.49 + X50.54 + X55.59 + Mayor_60, data = tasa_regresores)
# summary(reg)
#
# step(reg,direction="backward")
# Chunk 50
forecast_dummy_sindi
forecast_dummy_conde
forecast_dummy_total
forecast_dummy_sindi$pred
forecast_dummy_conde$pred
forecast_dummy_total$pred
# Proyección debe usar versión 1.8
forecast <- sarima.for(ts_sindi,n.ahead = 36, 0,1,2,0,0,1, S = 12 )
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
hist_frame_total <- hist_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3.png")
# Proyección debe usar versión 1.8
forecast <- forecast_dummy_sindi
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
hist_frame_conde <- hist_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3_dummy.png")
# Proyección
forecast <- forecast_dummy_conde
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_conde), date=as.Date(as.yearmon(time(ts_conde))))
hist_frame_conde <- hist_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria condenada") + theme_minimal()+ theme(legend.title=element_blank()) -> graf_pry_conde_1
graf_pry_conde_1
ggsave("graf_pry_conde_1_dummy.png")
# Proyección
forecast <- forecast_dummy_total
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
hist_frame_total <- hist_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo") + ylab("Población carcelaria total") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_4
graf_pry_total_4
ggsave("graf_pry_total_4_dummy.png")
# Proyección debe usar versión 1.8
forecast <- forecast_dummy_sindi
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
hist_frame_sindi <- hist_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3_dummy.png")
View(hist_frame_conde)
hist_frame_conde %>% left_join(hist_frame_sindi, by = c("date"="date")
)
hist_frame_conde %>% left_join(hist_frame_sindi, by = c("date"="date")) %>% left_join(hist_frame_total, by = c("date"="date")) %>% mutate(total_suma = Historico.x + Historico.y)
# Proyección
forecast <- forecast_dummy_total
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
pry_frame_total <- forecast_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo") + ylab("Población carcelaria total") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_4
graf_pry_total_4
ggsave("graf_pry_total_4_dummy.png")
# Proyección debe usar versión 1.8
forecast <- forecast_dummy_sindi
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_sindi), date=as.Date(as.yearmon(time(ts_sindi))))
pry_frame_sindi <-  forecast_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria sindicada") + theme_minimal() + theme(legend.title=element_blank()) -> graf_pry_total_3
graf_pry_total_3
ggsave("graf_pry_sindi_3_dummy.png")
# Proyección
forecast <- forecast_dummy_conde
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_conde), date=as.Date(as.yearmon(time(ts_conde))))
pry_frame_conde <-forecast_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria condenada") + theme_minimal()+ theme(legend.title=element_blank()) -> graf_pry_conde_1
graf_pry_conde_1
ggsave("graf_pry_conde_1_dummy.png")
# Proyección
forecast <- forecast_dummy_conde
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_conde), date=as.Date(as.yearmon(time(ts_conde))))
pry_frame_conde <-forecast_frame
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + xlab("Periodo")+ ylab("Población carcelaria condenada") + theme_minimal()+ theme(legend.title=element_blank()) -> graf_pry_conde_1
graf_pry_conde_1
ggsave("graf_pry_conde_1_dummy.png")
pry_frame_sindi
sarima
?sarima(9)
?sarima()
?sarima.for
sarima.for
pry_frame_sindi
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% left_join(pry_frame_total, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y)
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% left_join(pry_frame_total, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y, pry_total = Proyección)
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% left_join(pry_frame_total, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y, pry_total = Proyección) %>% select(date,pry_suma,pry_suma)
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% left_join(pry_frame_total, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y, pry_total = Proyección) %>% select(date,pry_suma,pry_total)
select
?select
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% left_join(pry_frame_total, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y, pry_total = Proyección) %>% dplyr::select(date,pry_suma,pry_total)
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y) %>% dplyr::select(date,pry_suma,pry_total) -> pry_ppl_arima
pry_frame_conde %>% left_join(pry_frame_sindi, by = c("date"="date")) %>% mutate(pry_suma = Proyección.x + Proyección.y) %>% dplyr::select(date,pry_suma) -> pry_ppl_arima
write.csv(pry_ppl_arima,"pry_ppl_arima.csv",row.names = FALSE)
