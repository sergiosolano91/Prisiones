# gráfica
graf_tendencia_cpp
ggsave("variacion_mensual_condenados_desc.png")
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
plot(diff(diff(ts_total), lag = 12))
#plot(diff(diff(ts_total), lag = 12))
acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
?acf2()
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
?sarima
arima_total
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,2, S = 12)
forecast
data.frame(Y=as.matrix(forecast), date=as.Date(as.yearmon(time(forecast))))
forecast
data.frame(Y=as.matrix(forecast$pred), date=as.Date(as.yearmon(time(forecast$pred))))
data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$pred) date=as.Date(as.yearmon(time(forecast$pred))))
data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se) date=as.Date(as.yearmon(time(forecast$pred))))
data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred))))
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección + error, lim_inf = Proyección - Errror)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección + error, lim_inf = Proyección - Errror)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección))
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,2, S = 12)
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección))
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección)) + ylim(c(0,NA))
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección)) + ylim(c(0,NA))
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección)) + ylim(c(85000,NA))
forecast_frame %>% ggplot(aes(x = date)) + geom_line(aes(y = Proyección)) + ylim(c(100000,NA))
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Proyección=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
ggplot() + geom_line(data = forecast_frame, aes(y = Proyección)) + ylim(c(100000,NA))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección)) + ylim(c(100000,NA))
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección)) + ylim(c(100000,NA)) + geom_line(data = hist_frame, aes(x = date, y = Proyección))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección)) + ylim(c(100000,NA)) + geom_line(data = hist_frame, aes(x = date, y = Historico))
View(hist_frame)
ggplot()  + geom_line(data = hist_frame, aes(x = date, y = Historico))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección)) + geom_line(data = hist_frame, aes(x = date, y = Historico))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "red")) + geom_line(data = hist_frame, aes(x = date, y = Historico))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = lim_sup, colour = "Limite Superior"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = lim_sup, colour = "Limite Superior")) + geom_line(data = forecast_frame, aes(x = date, y = lim_inf, colour = "Limite inferior"))
#grafica
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = lim_sup, colour = "Limite Superior")) + geom_line(data = forecast_frame, aes(x = date, y = lim_inf, colour = "Limite inferior"))
sarima.for
?sarima.for
#grafica
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd"))
#grafica
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + 2*Error, colour = "+2 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - 2*Error, colour = "-2 sd"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error, fill = "-1 sd"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error, fill = "-1 sd"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error, fill = "-1 sd"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error, fill = "gray"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error, fill = "grey"))
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd")) + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - Error, ymax = Proyección - Error))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error, fill = "gray"))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error, fill = "grey"))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error, fill = "grey70"))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error), fill = "grey70")
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,colour = "1 sd"  ), fill = "grey70")
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,fill = "1 sd"  ), fill = "grey70")
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,fill = "1 sd"  ), fill = "grey90")
# ggplot
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,fill = "1 sd"  ), fill = "grey70")
# ggplot
ggplot() + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70")
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error, fill = "2 sd"  ), fill = "grey90")  + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey70") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + theme(minimal)
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + theme_minimal()
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,3, S = 12)
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,3, S = 12)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + theme_minimal()
#+ geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd"))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,fill = "1 sd"  ), fill = "grey90")
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
```{r estima_arima_2, echo = FALSE, include = TRUE, fig.height=10}
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
```{r estima_arima_2, echo = FALSE, include = TRUE, fig.height=10, fig.width=7}
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
sarima_total_2
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,3, S = 12, details = FALSE)
sarima_total_2
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima_total_2
sarima_total_2 <- sarima(ts_total,1,1,1,1,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,1,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,2,1,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,2,1,0,3, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
sarima
sarima()
?sarima()
sarima_total_2 <- sarima(ts_total,1,2,1,0,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,1,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,2,1,0,1,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,1,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,1,0,0, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,2,0,0, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,2,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,2,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,2,1,1, S = 12, details = FALSE)
sarima_total_2
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total
arima_total <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
arima_total
arima_total
arima_total <- sarima(ts_total,1,1,1,0,0,0, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,3, S = 12, details = FALSE)
arima_total
arima_total <- sarima(ts_total,1,1,1,0,0,4, S = 12, details = FALSE)
arima_total
arima_total <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,2,1,0,0,2, S = 12, details = FALSE)
arima_total
arima_total <- sarima(ts_total,1,1,3,0,0,2, S = 12, details = FALSE)
arima_total
library("forecast")
auto.arima(ts_total)
arima_total <- sarima(ts_total,3,2,1,0,0,2, S = 12, details = FALSE)
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 3,2,1,0,0,2, S = 12)
# Proyección
forecast <- sarima.for(ts_total,n.ahead = 36, 3,2,1,0,0,2, S = 12)
# data frame
forecast_frame <- data.frame(Proyección=as.matrix(forecast$pred),Error=as.matrix(forecast$se), date=as.Date(as.yearmon(time(forecast$pred)))) %>% mutate(lim_sup = Proyección+Error, lim_inf = Proyección - Error)
#data histórica
hist_frame <- data.frame(Historico=as.matrix(ts_total), date=as.Date(as.yearmon(time(ts_total))))
# ggplot
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección - 2*Error, ymax = Proyección+2*Error, fill = "2 sd"  ), fill = "grey90")  + geom_ribbon(data = forecast_frame, aes(x = date, ymin = Proyección -Error, ymax = Proyección+Error,fill = "1 sd"  ), fill = "grey80") + geom_line(data = forecast_frame, aes(x = date, y = Proyección, colour = "Proyección")) + geom_line(data = hist_frame, aes(x = date, y = Historico, colour = "Histórico"))  + theme_minimal()
#+ geom_line(data = forecast_frame, aes(x = date, y = Proyección + Error, colour = "+1 sd")) + geom_line(data = forecast_frame, aes(x = date, y = Proyección - Error, colour = "-1 sd"))
ggplot() + geom_ribbon(data = forecast_frame, aes(x = date, ymin = -Error, ymax = +Error,fill = "1 sd"  ), fill = "grey90")
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
ppl_sitjur %>% dplyr::filter(categoria == "sindicados", !(is.na(valor))) -> ppl_sin
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library("timeSeries")
library("dplyr")
library("astsa")
library("xts")
library ("vars")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% dplyr::filter(categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
ggsave("sit_jur.png")
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% dplyr::filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
ggsave("genero.png")
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ggsave("tasas.png")
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
ggsave("tasas_log.png")
# ajustar población sindicada y condenada para análisis
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(MPPtimeseries))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ggsave("desc_total.png")
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
ggsave("crec_masc.png")
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento masculina- descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
ggsave("tend_masc_desc.png")
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
ggsave("tasa_crec_femenina.png")
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ggsave("tasa_crec_femenina.png")
# Población sindicada a serie de tiempo por situación
ppl_sitjur  %>% spread(key = "categoria", value = valor) -> ppl_situacion
# Serie de tiempo de población total
TPPtimeseries <- ts(ppl_situacion$total, frequency=12, start=c(1991,1))
# Serie de tiempo de población sindicada
SPPtimeseries <- ts(ppl_situacion$condenados, frequency=12, start=c(1991,1))
# Serie de tiempo de población condenada
CPPtimeseries <- ts(ppl_situacion$sindicados, frequency=12, start=c(1991,1))
# Ajustar a zoo, para poder hacer gráfica
Total <- as.zoo(diff(TPPtimeseries))
Sindicados <- as.zoo(diff(SPPtimeseries))
Condenados <- as.zoo(diff(CPPtimeseries))
# Gráficar crecimient de las tres
autoplot(merge(Total, Sindicados, Condenados), geom = "line")  + ylab("N° de personas") + xlab("Periodo") -> graf_var
graf_var
ggsave("variacion_intermensual.png")
# Descomponer variación intermensual
DeltaTPP <- decompose(Total)
# Asignar
tendencia <- as.zoo(DeltaTPP$trend)
aleatorio <- as.zoo(DeltaTPP$random)
estacional <- as.zoo(DeltaTPP$seasonal)
# Generar gráfica
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("N° de personas") + xlab("Periodo") -> graf_tendencia_tpp
graf_tendencia_tpp
ggsave("variacion_mensual_total_desc.png")
# Descomponer variación intermensual
DeltaSPP <- decompose(Sindicados)
# Asignar
tendencia <- as.zoo(DeltaSPP$trend)
aleatorio <- as.zoo(DeltaSPP$random)
estacional <- as.zoo(DeltaSPP$seasonal)
# Generar gráfica
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("N° de personas, sindicados") + xlab("Periodo") -> graf_tendencia_spp
# gráfica
graf_tendencia_spp
ggsave("variacion_mensual_sindicados_desc.png")
# Descomponer variación intermensual
DeltaCPP <- decompose(Condenados)
# Asignar
tendencia <- as.zoo(DeltaCPP$trend)
aleatorio <- as.zoo(DeltaCPP$random)
estacional <- as.zoo(DeltaCPP$seasonal)
# Generar gráfica
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("N° de personas, condenados") + xlab("Periodo") -> graf_tendencia_cpp
# gráfica
graf_tendencia_cpp
ggsave("variacion_mensual_condenados_desc.png")
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,2, S = 12)
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
#plot(diff(diff(ts_total), lag = 12))
acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
#plot(diff(diff(ts_total), lag = 12))
acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
ggsave("AFC_var_pob_total_desesta")
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
ggsave("AFC_var_pob_total_desesta.png")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
ggsave("PACF_var_pob_total_desesta.png")
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
ggsave("AFC_var_pob_total_desesta.png")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
ggsave("PACF_var_pob_total_desesta.png")
acf(diff(diff(ts_total)), S= 12)
data <- acf(diff(diff(ts_total)), S= 12)
data
#plot(diff(diff(ts_total), lag = 12))
acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
dev.copy(png,'AFC_var_pob_total_desesta.png')
dev.off()
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
dev.copy(png,'AFC_var_pob_total_desesta.png')
dev.off()
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
dev.copy(png,'PAFC_var_pob_total_desesta.png')
dev.off()
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
dev.copy(png,'AFC_var_pob_total_desesta.png')
dev.off()
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
dev.copy(png,'PAFC_var_pob_total_desesta.png')
dev.off()
ppl_sitjur %>% dplyr::filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
dev.copy(png,'AFC_var_pob_total_desesta.png')
dev.off()
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
dev.copy(png,'PAFC_var_pob_total_desesta.png')
dev.off()
library("gridExtra")
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
acf_total <- plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
pacf_total <- plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
#dev.copy(png,'PAFC_var_pob_total_desesta.png')
#dev.off()
grid.arrange(acf_total, pacf_total)
#dev.copy(png,'PAFC_var_pob_total_desesta.png')
#dev.off()
grid.arrange(acf_total, pacf_total, ncol = 2)
acf_total
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
acf_total <- plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
acf_total
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
#plot(diff(diff(ts_total), lag = 12))
#acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot(acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
plot(acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
acf_total <- plot(acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = " ")
acf_total
acf_total <- acf(diff(diff(ts_total)
acf_total <- acf(diff(diff(ts_total), S = 12)
acf_total <- acf(diff(diff(ts_total), S = 12))
acf_total %>% ggplot() + geom_bar(acf_total)
acf_total %>% ggplot() + geom_bar(aes(y = acf_total))
acf_total <- as.data.frame(acf(diff(diff(ts_total), S = 12)))
acf_total
acf_total <- as.data.frame(acf2(diff(diff(ts_total), S = 12)))
acf_total %>% ggplot() + geom_bar(aes(y = acf_total))
acf_total
acf_total %>% ggplot() + geom_bar(aes(y = ACF))
acf_total %>% ggplot() + geom_bar(aes(y = ACF), stat = "identity")
View(acf_total)
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity")
?acf2()
acf_total <- as.data.frame(acf2(diff(diff(ts_total), S = 12), max.lag = 60))
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity")
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity")
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = (12,24,26,48,60))
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,26,48,60))
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60))
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + tite("Población total")
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + title("Población total")
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total")
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> acf_total2
# Gráfica acf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> acf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> pacf_total
# Calcular acf y pacf
acf_total <- as.data.frame(acf2(diff(diff(ts_total), S = 12), max.lag = 60))
# Gráfica acf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> acf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> pacf_total
# Calcular acf y pacf
acf_total <- as.data.frame(acf2(diff(diff(ts_total), S = 12), max.lag = 60))
# Gráfica acf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> graf_acf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> graf_ pacf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> graf_ pacf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("Población total") -> graf_pacf_total
graf_pacf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población total") -> graf_pacf_total
# Gráfica acf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = ACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("ACF Población total") -> graf_acf_total
# Gráfica acf
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población total") -> graf_pacf_total
# Gráfica pacf total
acf_total %>% ggplot() + geom_bar(aes(x = c(1:60), y = PACF), stat = "identity") + scale_x_continuous(breaks = c(12,24,36,48,60)) + xlab("LAG") + ggtitle("PACF Población total") -> graf_pacf_total
graf_pacf_total
