data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ppl_sitjur %>% filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library ("timeSeries")
library ("ggplot2")
library("dplyr")
library("astsa")
library("xts")
library ("vars")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ppl_sitjur %>% filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,0,0,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library ("timeSeries")
library ("ggplot2")
library("dplyr")
library("astsa")
library("xts")
# library ("vars")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ppl_sitjur %>% filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
ts_sincon <- cbind (diff(ts_sin), diff(ts_con))
knitr::opts_chunk$set(echo = TRUE)
autoloads <- c("dplyr", "ggplot2", "Hmisc")
options(defaultPackages = c(getOption("defaultPackages"), autoloads))
rm(list = ls())
library("magrittr")
library("tidyr")
library("reshape2")
library("ggplot2")
library("plotly")
library("zoo")
library("shiny")
library("curl")
library ("timeSeries")
library ("ggplot2")
library("dplyr")
library("astsa")
library("xts")
# library ("vars")
# Carga de archivos base
url <- "https://www.dropbox.com/s/epb2srm6pglyz9w/PPL_SITJUR_ENE17.csv?dl=1"
destfile <- "POB_SITJUR_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_SITJUR_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base Situación judicial
ppl_sitjur_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_sitjur <- cbind(gather(ppl_sitjur_ene17)[2],rep(c(rep("sindicados",12), rep("condenados",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_sitjur) <- c("valor", "categoria")
ppl_sitjur$valor <- as.numeric(ppl_sitjur$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_sitjur <- cbind(ppl_sitjur,anio, mes)
# ppl_sitjur  %<>% spread(key = "categoria", value = valor)
ppl_sitjur %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_sitjur %>% filter (categoria %in% c("sindicados","condenados","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
# Carga de archivos base
url <- "https://www.dropbox.com/s/95m8oziipdy6ely/PPL_GEN_ENE17.csv?dl=1"
destfile <- "POB_GEN_INP_ENE17.csv"
curl_download(url, destfile)
data = read.csv("POB_GEN_INP_ENE17.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# Carga de archivos base genero
ppl_gen_ene17 <- (data[2:13,2:dim(data)[2]])
ppl_gen <- cbind(gather(ppl_gen_ene17)[2],rep(c(rep("hombres",12), rep("mujeres",12), rep("total",12)),dim(ppl_sitjur_ene17)[2]/3))
colnames(ppl_gen) <- c("valor", "categoria")
ppl_gen$valor <- as.numeric(ppl_gen$valor)*1000
anio <- sort(rep(seq(1991,1991+dim(ppl_sitjur_ene17)[2]/3-1,by =1),36))
mes <- rep(seq(1,12,1),dim(ppl_sitjur_ene17)[2])
ppl_gen <- cbind(ppl_gen,anio, mes)
ppl_gen %<>% mutate (Fecha = as.Date(paste (1,mes,anio, sep = "/"),"%d/%m/%Y"))
ppl_gen %>% filter (categoria %in% c("hombres","mujeres","total"), valor >0) %>%  ggplot() + geom_line(aes(x=Fecha,y = valor, colour = categoria),stat = "identity") + ylab("Personas privadas de la libertad")-> grafica
# ggplotly(grafica)
grafica
url <- "https://www.dropbox.com/s/54vmiq6tfhor0t1/POB_NAL_DANE.csv?dl=1"
destfile <- "POB_NAL_DAN.csv"
curl_download(url, destfile)
# setwd("/home/sergio/Prisiones")
data = read.csv("POB_NAL_DAN.csv",header = TRUE,sep = ",",stringsAsFactors=FALSE)
# reordenar columnas por sexo
data %>% spread(Grupo, Total, fill = NA, convert = FALSE) %>% mutate(tasa_hombres = c(log(Hombres[2:length(Hombres)]/Hombres[1:length(Hombres)-1]),1))%>% mutate(tasa_mujeres = c(log(Mujeres[2:length(Mujeres)]/Mujeres[1:length(Mujeres)-1]),1))%>% mutate(Fecha=as.Date(paste("01","06",Año,sep="/"),"%d/%m/%Y"))   -> data2
# Proyectar población a nivel mensual
ts_pob_nal_hom <- zoo(data2$Hombres,data2$Fecha)
ts_pob_nal_hom_mon <- na.spline(ts_pob_nal_hom, xout = seq(start(ts_pob_nal_hom),as.Date(as.yearqtr(end(ts_pob_nal_hom))+ 3/4) , by = "month"), method = "hyman")
ts_pob_nal_muj <- zoo(data2$Mujeres,data2$Fecha)
ts_pob_nal_muj_mon <- na.spline(ts_pob_nal_muj, xout = seq(start(ts_pob_nal_muj),as.Date(as.yearqtr(end(ts_pob_nal_muj))+ 3/4) , by = "month"), method = "fmm")
pob_nal_est <- cbind(seq(as.Date("1985/6/1"), as.Date("2021/1/1"), "months"), as.data.frame.ts(ts_pob_nal_hom_mon),as.data.frame.ts(ts_pob_nal_muj_mon))
colnames(pob_nal_est) <- c("Fecha","hombres_nac","mujeres_nac")
pob_nal_est %<>% mutate (total_nac = hombres_nac + mujeres_nac)
ppl_gen  %<>% spread(key = "categoria", value = valor)
ppl_tasa <- left_join(pob_nal_est,ppl_gen, by = "Fecha") %>% mutate (tasa_hombres = hombres/hombres_nac * 100000, tasa_mujeres = mujeres/mujeres_nac * 100000, tasa_total = total/total_nac*100000)
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento
# ggplotly (tasas_encarcelamiento)
tasas_encarcelamiento
ppl_tasa %>% ggplot() + geom_line(aes(x=Fecha,y=tasa_hombres,colour="Hombres")) +geom_line(aes(x=Fecha,y=tasa_mujeres,colour="Mujeres"))+geom_line(aes(x=Fecha,y=tasa_total,colour="Total")) + expand_limits(y=0) + scale_y_log10 (breaks = c(10,50,100,200,400)) + ylab("Tasa de encarcelamiento")-> tasas_encarcelamiento_log
# ggplotly (tasas_encarcelamiento_log)
tasas_encarcelamiento_log
MPPtimeseries <- ts(ppl_gen$total, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL total") + xlab("Periodo") -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$hombres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL masculina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
MPPtimeseries <- ts(ppl_gen$mujeres, frequency=12, start=c(1991,1))
autoplot(as.zoo(diff(log(MPPtimeseries))), geom = "line") + ylab("tasa de crecimiento- PPL femenina") + xlab("Periodo") + theme(aspect.ratio=1/2) -> graf_crecimiento
graf_crecimiento
# ggplotly(graf_crecimiento)
DeltaMPP <- decompose(diff(log(MPPtimeseries)))
tendencia <- as.zoo(DeltaMPP$trend)
aleatorio <- as.zoo(DeltaMPP$random)
estacional <- as.zoo(DeltaMPP$seasonal)
autoplot(merge(tendencia,estacional, aleatorio), geom = "line") + ylab("tasa de crecimiento - descomposición") + xlab("Periodo") -> graf_tendencia
graf_tendencia
# ggplotly(graf_tendencia)
ppl_sitjur %>% filter(categoria == "total", !(is.na(valor))) -> ppl_total
ppl_total <- ppl_total$valor
ts_total <- ts(ppl_total, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población total desestacionalizado")
plot(pacf(diff(diff(ts_total), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población total desestacionalizado")
arima_total <- sarima(ts_total,1,1,1,0,0,1, S = 12, details = FALSE)
sarima_total_2 <- sarima(ts_total,1,1,1,0,0,2, S = 12, details = FALSE)
forecast <- sarima.for(ts_total,n.ahead = 36, 1,1,1,0,0,2, S = 12)
ppl_sitjur %>% filter(categoria == "sindicados", !(is.na(valor))) -> ppl_sin
ppl_sin <- ppl_sin$valor
ts_sin <- ts(ppl_sin, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_sin), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población sindicada desestacionalizado")
plot(pacf(diff(diff(ts_sin), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población sindicada desestacionalizado")
forecast <- sarima.for(ts_sin,n.ahead = 36, 1,1,1,0,0,1, S = 12)
ppl_sitjur %>% filter(categoria == "condenados", !(is.na(valor))) -> ppl_con
ppl_con <- ppl_con$valor
ts_con <- ts(ppl_con, start = 1991, frequency = 12)
# plot(diff(diff(ts_total), lag = 12))
# acf2(diff(diff(ts_total), lag = 12), max.lag = 60, details = FALSE)
plot (acf(diff(diff(ts_con), lag = 12), lag.max = 60, plot = FALSE),main = "AFC Variación de la población condenada desestacionalizado")
plot(pacf(diff(diff(ts_con), lag = 12), lag.max = 60, plot = FALSE),main = "PAFC Variación de la población condenada desestacionalizado")
forectast <- sarima.for(ts_con,n.ahead = 36, 1,1,1,0,0,1, S = 12)
ts_sincon <- cbind (diff(ts_sin), diff(ts_con))
VARselect(ts_sincon, lag.max=9, type="const")
ts_sincon_mod <- VAR(ts_sincon,p = 2)
forecast_var <- predict(ts_sincon_mod, n.ahead = 60)
ts_sincon_mod
forecast_var
ts_sincon_mod <- VAR(ts_sincon,p = 1)
ts_sincon <- cbind (diff(ts_sin), diff(ts_con))
VARselect(ts_sincon, lag.max=9, type="const")
ts_sincon_mod <- VAR(ts_sincon,p = 2)
forecast_var <- predict(ts_sincon_mod, n.ahead = 60)
ts_sincon_mod
forecast_var
ts_sincon <- cbind (diff(ts_sin), diff(ts_con))
VARselect(ts_sincon, lag.max=9, type="const")
ts_sincon_mod <- VAR(ts_sincon,p = 1)
forecast_var <- predict(ts_sincon_mod, n.ahead = 60)
ts_sincon_mod
forecast_var
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library("astsa")
library("xts")
library ("vars")
library ("tsDyn")
B1<-matrix(c(0.7, 0.2, 0.2, 0.7), 2)
var1<-VAR.sim(B=B1,n=100,include="none")
ts.plot(var1, type="l", col=c(1,2))
VARselect(var1, lag.max=9, type="const")
var1_est <- VAR(var1,p = 1)
var1_est
