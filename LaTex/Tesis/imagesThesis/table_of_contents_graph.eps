%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 187 167
%%LanguageLevel: 2
%%Creator: CorelDRAW
%%Title: table_of_contents_graph.eps
%%CreationDate: Sun May 31 19:51:02 2009
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/UseLevel 2 def
%Build: CorelDRAW Versión 13.0.0.576
%Color profile:  Perfil genérico separaciones offset
/CorelIsEPS true def
%%BeginResource: procset wCorel3Dict 3.0 0
/wCorel3Dict 300 dict def wCorel3Dict begin
% Copyright (c)1992-2005 Corel Corporation
% All rights reserved.     v13 r0.0
/bd{bind def}bind def/ld{load def}bd/xd{exch def}bd/_ null def/rp{{pop}repeat}
bd/@cp/closepath ld/@gs/gsave ld/@gr/grestore ld/@np/newpath ld/Tl/translate ld
/$sv 0 def/@sv{/$sv save def}bd/@rs{$sv restore}bd/spg/showpage ld/showpage{}
bd currentscreen/@dsp xd/$dsp/@dsp def/$dsa xd/$dsf xd/$sdf false def/$SDF
false def/$Scra 0 def/SetScr/setscreen ld/@ss{2 index 0 eq{$dsf 3 1 roll 4 -1
roll pop}if exch $Scra add exch load SetScr}bd/SepMode_5 where{pop}{/SepMode_5
0 def}ifelse/CorelIsSeps where{pop}{/CorelIsSeps false def}ifelse
/CorelIsInRIPSeps where{pop}{/CorelIsInRIPSeps false def}ifelse/CorelIsEPS
where{pop}{/CorelIsEPS false def}ifelse/CurrentInkName_5 where{pop}
{/CurrentInkName_5(Composite)def}ifelse/$ink_5 where{pop}{/$ink_5 -1 def}
ifelse/fill_color 6 array def/num_fill_inks 1 def/$o 0 def/$fil 0 def
/outl_color 6 array def/num_outl_inks 1 def/$O 0 def/$PF false def/$bkg false
def/$op false def matrix currentmatrix/$ctm xd/$ptm matrix def/$ttm matrix def
/$stm matrix def/$ffpnt true def/CorelDrawReencodeVect[16#0/grave 16#5/breve
16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron 16#D/dotlessi
16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe 16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/get_ps_level/languagelevel where{pop systemdict/languagelevel get exec}{1
}ifelse def/level2 get_ps_level 2 ge def/level3 get_ps_level 3 ge def
/is_distilling{/product where{pop systemdict/setdistillerparams known product
(Adobe PostScript Parser)ne and}{false}ifelse}bd/is_rip_separation{
is_distilling{false}{level2{currentpagedevice/Separations 2 copy known{get}{
pop pop false}ifelse}{false}ifelse}ifelse}bd/is_current_sep_color{
is_separation{gsave false setoverprint 1 1 1 1 5 -1 roll findcmykcustomcolor 1
setcustomcolor currentgray 0 eq grestore}{pop false}ifelse}bd
/get_sep_color_index{dup length 1 sub 0 1 3 -1 roll{dup 3 -1 roll dup 3 -1 roll
get is_current_sep_color{exit}{exch pop}ifelse}for pop -1}bd/is_separation{
/LumSepsDict where{pop false}{/AldusSepsDict where{pop false}{
is_rip_separation{true}{1 0 0 0 gsave setcmykcolor currentcmykcolor grestore
add add add 0 ne 0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add
add 0 ne 0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne and and
and not}ifelse}ifelse}ifelse}bind def/is_composite{is_separation not
is_distilling or}bd/is_sim_devicen{level2 level3 not and{is_distilling
is_rip_separation or}{false}ifelse}bd/@PL{/LV where{pop LV 2 ge level2 not and
{@np/Courier findfont 12 scalefont setfont 72 144 m
(The PostScript level set in the Corel application is higher than)show 72 132 m
(the PostScript level of this device. Change the PS Level in the Corel)show 72
120 m(application to Level 1 by selecting the PostScript tab in the print)show
72 108 m(dialog, and selecting Level 1 from the Compatibility drop down list.)
show flush spg quit}if}if}bd/@BeginSysCorelDict{systemdict/Corel30Dict known
{systemdict/Corel30Dict get exec}if systemdict/CorelLexDict known{1 systemdict
/CorelLexDict get exec}if}bd/@EndSysCorelDict{systemdict/Corel30Dict known
{end}if/EndCorelLexDict where{pop EndCorelLexDict}if}bd AutoFlatness{/@ifl{dup
currentflat exch sub 10 gt{
([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)print flush
@np exit}{currentflat 2 add setflat}ifelse}bd/@fill/fill ld/fill{currentflat{
{@fill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@eofill/eofill ld/eofill
{currentflat{{@eofill}stopped{@ifl}{exit}ifelse}bind loop setflat}bd/@clip
/clip ld/clip{currentflat{{@clip}stopped{@ifl}{exit}ifelse}bind loop setflat}
bd/@eoclip/eoclip ld/eoclip{currentflat{{@eoclip}stopped{@ifl}{exit}ifelse}
bind loop setflat}bd/@stroke/stroke ld/stroke{currentflat{{@stroke}stopped
{@ifl}{exit}ifelse}bind loop setflat}bd}if level2{/@ssa{true setstrokeadjust}
bd}{/@ssa{}bd}ifelse/d/setdash ld/j/setlinejoin ld/J/setlinecap ld/M
/setmiterlimit ld/w/setlinewidth ld/O{/$o xd}bd/R{/$O xd}bd/W/eoclip ld/c
/curveto ld/C/c ld/l/lineto ld/L/l ld/rl/rlineto ld/m/moveto ld/n/newpath ld/N
/newpath ld/P{11 rp}bd/u{}bd/U{}bd/A{pop}bd/q/@gs ld/Q/@gr ld/&{}bd/@j{@sv @np}
bd/@J{@rs}bd/g{1 exch sub 0 0 0 1 null 1 set_fill_color/$fil 0 def}bd/G{1 sub
neg 0 0 0 1 null 1 set_outline_color}bd/set_fill_color{/fill_color exch def
/num_fill_inks fill_color length 6 idiv def/bFillDeviceN num_fill_inks 1 gt def
/$fil 0 def}bd/set_outline_color{/outl_color exch def/num_outl_inks outl_color
length 6 idiv def/bOutlDeviceN num_outl_inks 1 gt def}bd
/get_devicen_color_names{dup length 6 idiv dup 5 mul exch getinterval}bd
/get_devicen_color_specs{dup length 6 idiv dup 4 mul getinterval}bd
/get_devicen_color{dup length 6 idiv 0 exch getinterval}bd/mult_devicen_color{
/colorarray exch def/mult_vals exch def 0 1 mult_vals length 1 sub{colorarray
exch dup mult_vals exch get exch dup colorarray exch get 3 -1 roll mul put}for
colorarray}bd/combine_devicen_colors{/colorarray2 exch def/colorarray1 exch def
/num_inks1 colorarray1 length 6 idiv def/num_inks2 colorarray2 length 6 idiv
def/num3 0 def/colorarray3[num_inks1 num_inks2 add 6 mul{0}repeat]def 0 1
num_inks1 1 sub{colorarray1 exch get colorarray3 num3 3 -1 roll put/num3 num3 1
add def}for 0 1 num_inks2 1 sub{colorarray2 exch get colorarray3 num3 3 -1 roll
put/num3 num3 1 add def}for colorarray1 num_inks1 dup 4 mul getinterval
colorarray3 num3 3 -1 roll putinterval/num3 num3 num_inks1 4 mul add def
colorarray2 num_inks2 dup 4 mul getinterval colorarray3 num3 3 -1 roll
putinterval/num3 num3 num_inks2 4 mul add def colorarray1 num_inks1 dup 5 mul
exch getinterval colorarray3 num3 3 -1 roll putinterval/num3 num3 num_inks1 add
def colorarray2 num_inks2 dup 5 mul exch getinterval colorarray3 num3 3 -1 roll
putinterval/num3 num3 num_inks2 add def colorarray3}bd/get_devicen_color_spec{
/colorant_index exch def/colorarray exch def/ncolorants colorarray length 6
idiv def[colorarray colorant_index get colorarray ncolorants colorant_index 4
mul add 4 getinterval aload pop colorarray ncolorants 5 mul colorant_index add
get]}bd/set_devicen_color{level3{/colorarray exch def/numcolorants colorarray
length 6 idiv def colorarray get_devicen_color_specs/tint_params exch def[
/DeviceN colorarray get_devicen_color_names/DeviceCMYK{tint_params
CorelTintTransformFunction}]setcolorspace colorarray get_devicen_color aload
pop setcolor}{/DeviceCMYK setcolorspace devicen_to_cmyk aload pop pop @tc_5
setprocesscolor_5}ifelse}bd/sf{/bmp_fill_fg_color xd}bd/i{dup 0 ne{setflat}
{pop}ifelse}bd/v{4 -2 roll 2 copy 6 -2 roll c}bd/V/v ld/y{2 copy c}bd/Y/y ld
/@w{matrix rotate/$ptm xd matrix scale $ptm dup concatmatrix/$ptm xd 1 eq{$ptm
exch dup concatmatrix/$ptm xd}if 1 w}bd/@g{1 eq dup/$sdf xd{/$scp xd/$sca xd
/$scf xd}if}bd/@G{1 eq dup/$SDF xd{/$SCP xd/$SCA xd/$SCF xd}if}bd/@D{2 index 0
eq{$dsf 3 1 roll 4 -1 roll pop}if 3 copy exch $Scra add exch load SetScr/$dsp
xd/$dsa xd/$dsf xd}bd/$ngx{$SDF{$SCF SepMode_5 0 eq{$SCA}{$dsa}ifelse $SCP @ss
}if}bd/@MN{2 copy le{pop}{exch pop}ifelse}bd/@MX{2 copy ge{pop}{exch pop}
ifelse}bd/InRange{3 -1 roll @MN @MX}bd/@sqr{dup 0 rl dup 0 exch rl neg 0 rl @cp
}bd/currentscale{1 0 dtransform matrix defaultmatrix idtransform dup mul exch
dup mul add sqrt 0 1 dtransform matrix defaultmatrix idtransform dup mul exch
dup mul add sqrt}bd/@unscale{}bd/wDstChck{2 1 roll dup 3 -1 roll eq{1 add}if}
bd/@dot{dup mul exch dup mul add 1 exch sub}bd/@lin{exch pop abs 1 exch sub}bd
/cmyk2rgb{3{dup 5 -1 roll add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop}bd
/rgb2cmyk{3{1 exch sub 3 1 roll}repeat 3 copy @MN @MN 3{dup 5 -1 roll sub neg
exch}repeat}bd/rgb2g{2 index .299 mul 2 index .587 mul add 1 index .114 mul add
4 1 roll pop pop pop}bd/devicen_to_cmyk{/convertcolor exch def convertcolor
get_devicen_color aload pop convertcolor get_devicen_color_specs
CorelTintTransformFunction}bd/WaldoColor_5 where{pop}{/SetRgb/setrgbcolor ld
/GetRgb/currentrgbcolor ld/SetGry/setgray ld/GetGry/currentgray ld/SetRgb2
systemdict/setrgbcolor get def/GetRgb2 systemdict/currentrgbcolor get def
/SetHsb systemdict/sethsbcolor get def/GetHsb systemdict/currenthsbcolor get
def/rgb2hsb{SetRgb2 GetHsb}bd/hsb2rgb{3 -1 roll dup floor sub 3 1 roll SetHsb
GetRgb2}bd/setcmykcolor where{pop/LumSepsDict where{pop/SetCmyk_5{LumSepsDict
/setcmykcolor get exec}def}{/AldusSepsDict where{pop/SetCmyk_5{AldusSepsDict
/setcmykcolor get exec}def}{/SetCmyk_5/setcmykcolor ld}ifelse}ifelse}{
/SetCmyk_5{cmyk2rgb SetRgb}bd}ifelse/currentcmykcolor where{pop/GetCmyk
/currentcmykcolor ld}{/GetCmyk{GetRgb rgb2cmyk}bd}ifelse/setoverprint where
{pop}{/setoverprint{/$op xd}bd}ifelse/currentoverprint where{pop}{
/currentoverprint{$op}bd}ifelse/@tc_5{5 -1 roll dup 1 ge{pop}{4{dup 6 -1 roll
mul exch}repeat pop}ifelse}bd/@trp{exch pop 5 1 roll @tc_5}bd
/setprocesscolor_5{SepMode_5 0 eq{SetCmyk_5}{SepsColor not{4 1 roll pop pop pop
1 exch sub SetGry}{SetCmyk_5}ifelse}ifelse}bd/findcmykcustomcolor where{pop}{
/findcmykcustomcolor{5 array astore}bd}ifelse/Corelsetcustomcolor_exists false
def/setcustomcolor where{pop/Corelsetcustomcolor_exists true def}if CorelIsSeps
true eq CorelIsInRIPSeps false eq and{/Corelsetcustomcolor_exists false def}if
Corelsetcustomcolor_exists false eq{/setcustomcolor{exch aload pop SepMode_5 0
eq{pop @tc_5 setprocesscolor_5}{CurrentInkName_5 eq{4 index}{0}ifelse 6 1 roll
5 rp 1 sub neg SetGry}ifelse}bd}if/@scc_5{dup type/booleantype eq{dup
currentoverprint ne{setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse dup _ eq
{pop setprocesscolor_5 pop}{dup(CorelRegistrationColor)eq{5 rp 1 exch sub
setregcolor}{findcmykcustomcolor exch setcustomcolor}ifelse}ifelse SepMode_5 0
eq{true}{GetGry 1 eq currentoverprint and not}ifelse}bd/separate_color{
SepMode_5 0 ne{[exch/colorarray_sep exch def/ink_num -1 def colorarray_sep
length 6 idiv 1 gt{colorarray_sep get_devicen_color_names dup length 1 sub 0 1
3 -1 roll{exch dup 3 -1 roll dup 3 1 roll get CurrentInkName_5 eq{/ink_num exch
def}{pop}ifelse}for pop ink_num -1 ne{colorarray_sep ink_num
get_devicen_color_spec aload pop pop SepsColor not{pop pop pop pop 1 0 0 0 5 -1
roll}if null}{0 0 0 0 0 null}ifelse}{colorarray_sep 5 get $ink_5 4 eq{
CurrentInkName_5 eq{colorarray_sep aload pop pop SepsColor not{pop pop pop pop
0 0 0 1}if null}{0 0 0 0 0 null}ifelse}{colorarray_sep 0 get colorarray_sep
$ink_5 1 add get 3 -1 roll null eq{0 0 0 4 -1 roll SepsColor{4 $ink_5 1 add
roll}if null}{pop pop 0 0 0 0 0 null}ifelse}ifelse}ifelse]}if}bd
/separate_cmyk_color{$ink_5 -1 ne{[exch aload pop 3 $ink5 sub index
/colorarray_sep exch def/ink_num -1 def colorarray_sep get_devicen_color_names
dup length 1 sub 0 1 3 -1 roll{exch dup 3 -1 roll dup 3 1 roll get
CurrentInkName_5 eq{/ink_num exch def}{pop}ifelse}for pop ink_num -1 ne{[
colorarray_sep ink_num get_devicen_color_spec aload pop]}{[0 0 0 0 0 null]
}ifelse}if}bd/set_current_color{dup type/booleantype eq{dup currentoverprint ne
{setoverprint}{pop}ifelse}{1 eq setoverprint}ifelse/cur_color exch def
/nNumColors cur_color length 6 idiv def nNumColors 1 eq{cur_color 5 get
(CorelRegistrationColor)eq{cur_color aload pop 5 rp 1 exch sub setregcolor}{
SepMode_5 0 eq{cur_color aload pop dup null eq{pop @tc_5 setprocesscolor_5}{
findcmykcustomcolor exch setcustomcolor}ifelse}{cur_color separate_color aload
pop pop @tc_5 setprocesscolor_5}ifelse}ifelse}{SepMode_5 0 eq{is_distilling
is_rip_separation or{cur_color set_devicen_color}{cur_color devicen_to_cmyk
setprocesscolor_5}ifelse}{cur_color separate_color aload pop pop @tc_5
setprocesscolor_5}ifelse}ifelse SepMode_5 0 eq{true}{GetGry 1 eq
currentoverprint and not}ifelse}bd/colorimage where{pop/ColorImage{colorimage}
def}{/ColorImage{/ncolors xd/$multi xd $multi true eq{ncolors 3 eq{/daqB xd
/daqG xd/daqR xd pop pop exch pop abs{daqR pop daqG pop daqB pop}repeat}{/daqK
xd/daqY xd/daqM xd/daqC xd pop pop exch pop abs{daqC pop daqM pop daqY pop daqK
pop}repeat}ifelse}{/dataaq xd{dataaq ncolors dup 3 eq{/$dat xd 0 1 $dat length
3 div 1 sub{dup 3 mul $dat 1 index get 255 div $dat 2 index 1 add get 255 div
$dat 3 index 2 add get 255 div rgb2g 255 mul cvi exch pop $dat 3 1 roll put}
for $dat 0 $dat length 3 idiv getinterval pop}{4 eq{/$dat xd 0 1 $dat length 4
div 1 sub{dup 4 mul $dat 1 index get 255 div $dat 2 index 1 add get 255 div
$dat 3 index 2 add get 255 div $dat 4 index 3 add get 255 div cmyk2rgb rgb2g
255 mul cvi exch pop $dat 3 1 roll put}for $dat 0 $dat length ncolors idiv
getinterval}if}ifelse}image}ifelse}bd}ifelse/setcmykcolor{1 5 1 roll null 6
array astore currentoverprint set_current_color/$ffpnt xd}bd/currentcmykcolor{
GetCmyk}bd/setrgbcolor{rgb2cmyk setcmykcolor}bd/currentrgbcolor{
currentcmykcolor cmyk2rgb}bd/sethsbcolor{hsb2rgb setrgbcolor}bd
/currenthsbcolor{currentrgbcolor rgb2hsb}bd/setgray{dup dup setrgbcolor}bd
/currentgray{currentrgbcolor rgb2g}bd/InsideDCS false def/IMAGE/image ld/image
{InsideDCS{IMAGE}{/EPSDict where{pop SepMode_5 0 eq{IMAGE}{dup type/dicttype eq
{dup/ImageType get 1 ne{IMAGE}{dup dup/BitsPerComponent get 8 eq exch
/BitsPerComponent get 1 eq or currentcolorspace 0 get/DeviceGray eq and{
CurrentInkName_5(Black)eq{IMAGE}{dup/DataSource get/TCC xd/Height get abs{TCC
pop}repeat}ifelse}{IMAGE}ifelse}ifelse}{2 index 1 ne{CurrentInkName_5(Black)eq
{IMAGE}{/TCC xd pop pop exch pop abs{TCC pop}repeat}ifelse}{IMAGE}ifelse}
ifelse}ifelse}{IMAGE}ifelse}ifelse}bd}ifelse/WaldoColor_5 true def/$fm 0 def
/wfill{1 $fm eq{fill}{eofill}ifelse}bd/@Pf{@sv SepMode_5 0 eq $Psc 0 ne or
$ink_5 3 eq or{0 J 0 j[]0 d fill_color $o set_current_color pop $ctm setmatrix
72 1000 div dup matrix scale dup concat dup Bburx exch Bbury exch itransform
ceiling cvi/Bbury xd ceiling cvi/Bburx xd Bbllx exch Bblly exch itransform
floor cvi/Bblly xd floor cvi/Bbllx xd $Prm aload pop $Psn load exec}{1 SetGry
wfill}ifelse @rs @np}bd/F{matrix currentmatrix $sdf{$scf $sca $scp @ss}if $fil
1 eq{CorelPtrnDoFill}{$fil 2 eq{@ff}{$fil 3 eq{@Pf}{level3{fill_color $o
set_current_color{wfill}{@np}ifelse}{/overprint_flag $o def is_distilling
is_rip_separation or{0 1 num_fill_inks 1 sub{dup 0 gt{/overprint_flag true def
}if fill_color exch get_devicen_color_spec overprint_flag set_current_color{
@gs wfill @gr}{@np exit}ifelse}for}{fill_color overprint_flag set_current_color
{@gs wfill @gr}{@np exit}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{$dsf
$dsa $dsp @ss}if setmatrix}bd/f{@cp F}bd/S{matrix currentmatrix $ctm setmatrix
$SDF{$SCF $SCA $SCP @ss}if level3{outl_color $O set_current_color{matrix
currentmatrix $ptm concat stroke setmatrix}{@np}ifelse}{/overprint_flag $O def
is_distilling is_rip_separation or{0 1 num_outl_inks 1 sub{dup 0 gt{
/overprint_flag true def}if outl_color exch get_devicen_color_spec
overprint_flag set_current_color{matrix currentmatrix $ptm concat @gs stroke
@gr setmatrix}{@np exit}ifelse}for}{outl_color overprint_flag set_current_color
{matrix currentmatrix $ptm concat @gs stroke @gr setmatrix}{@np exit}ifelse
}ifelse}ifelse $SDF{$dsf $dsa $dsp @ss}if setmatrix}bd/s{@cp S}bd/B{@gs F @gr S
}bd/b{@cp B}bd/_E{5 array astore exch cvlit xd}bd/@cc{currentfile $dat
readhexstring pop}bd/@sm{/$ctm $ctm currentmatrix def}bd/@E{/Bbury xd/Bburx xd
/Bblly xd/Bbllx xd}bd/@c{@cp}bd/@P{/$fil 3 def/$Psn xd/$Psc xd array astore
/$Prm xd}bd/tcc{@cc}def/@B{@gs S @gr F}bd/@b{@cp @B}bd/@sep{CurrentInkName_5
(Composite)eq{/$ink_5 -1 def}{CurrentInkName_5(Cyan)eq{/$ink_5 0 def}{
CurrentInkName_5(Magenta)eq{/$ink_5 1 def}{CurrentInkName_5(Yellow)eq{/$ink_5 2
def}{CurrentInkName_5(Black)eq{/$ink_5 3 def}{/$ink_5 4 def}ifelse}ifelse}
ifelse}ifelse}ifelse}bd/@whi{@gs -72000 dup m -72000 72000 l 72000 dup l 72000
-72000 l @cp 1 SetGry fill @gr}bd/@neg{[{1 exch sub}/exec cvx currenttransfer
/exec cvx]cvx settransfer @whi}bd/deflevel 0 def/@sax{/deflevel deflevel 1 add
def}bd/@eax{/deflevel deflevel dup 0 gt{1 sub}if def deflevel 0 gt{/eax load}{
eax}ifelse}bd/eax{{exec}forall}bd/@rax{deflevel 0 eq{@rs @sv}if}bd systemdict
/pdfmark known not{/pdfmark/cleartomark ld}if/wclip{1 $fm eq{clip}{eoclip}
ifelse}bd level2{/setregcolor{/neg_flag exch def[/Separation/All/DeviceCMYK{
dup dup dup}]setcolorspace 1.0 neg_flag sub setcolor}bd}{/setregcolor{1 exch
sub dup dup dup setcmykcolor}bd}ifelse/CorelTintTransformFunction{
/colorantSpecArray exch def/nColorants colorantSpecArray length 4 idiv def
/inColor nColorants 1 add 1 roll nColorants array astore def/outColor 4 array
def 0 1 3{/nOutInk exch def 1 0 1 nColorants 1 sub{dup inColor exch get exch 4
mul nOutInk add colorantSpecArray exch get mul 1 exch sub mul}for 1 exch sub
outColor nOutInk 3 -1 roll put}for outColor aload pop}bind def
% Copyright (c)1992-2005 Corel Corporation
% All rights reserved.     v13 r0.0
/z{exch findfont exch scalefont setfont}bd/ZB{9 dict dup begin 4 1 roll
/FontType 3 def/FontMatrix xd/FontBBox xd/Encoding 256 array def 0 1 255{
Encoding exch/.notdef put}for/CharStrings 256 dict def CharStrings/.notdef{}
put/Metrics 256 dict def Metrics/.notdef 3 -1 roll put/BuildChar{exch dup
/$char exch/Encoding get 3 index get def dup/Metrics get $char get aload pop
setcachedevice begin Encoding exch get CharStrings exch get end exec}def end
definefont pop}bd/ZBAddChar{findfont begin dup 4 1 roll dup 6 1 roll Encoding 3
1 roll put CharStrings 3 1 roll put Metrics 3 1 roll put end}bd/Z{findfont dup
maxlength 2 add dict exch dup{1 index/FID ne{3 index 3 1 roll put}{pop pop}
ifelse}forall pop dup dup/Encoding get 256 array copy dup/$fe xd/Encoding exch
put dup/Fontname 3 index put 3 -1 roll dup length 0 ne{0 exch{dup type 0 type
eq{exch pop}{$fe exch 2 index exch put 1 add}ifelse}forall pop}if dup 256 dict
dup/$met xd/Metrics exch put dup/FontMatrix get 0 get 1000 mul 1 exch div 3
index length 256 eq{0 1 255{dup $fe exch get dup/.notdef eq{pop pop}{5 index 3
-1 roll get 2 index mul $met 3 1 roll put}ifelse}for}if pop definefont pop pop
}bd/CorelIsValidCharpath{pathbbox 3 -1 roll sub abs 0.5 ge 3 1 roll sub abs 0.5
ge and}bd/@ftx{{currentpoint 3 -1 roll(0)dup 3 -1 roll 0 exch put dup @gs true
charpath $ctm setmatrix CorelIsValidCharpath{@@txt}if @gr @np stringwidth pop 3
-1 roll add exch m}forall}bd/@ft{matrix currentmatrix exch $sdf{$scf $sca $scp
@ss}if $fil 1 eq{/@@txt/@pf ld @ftx}{$fil 2 eq{/@@txt/@ff ld @ftx}{$fil 3 eq
{/@@txt/@Pf ld @ftx}{$fil 4 eq{/@@txt/CorelShfillDoFill ld @ftx}{fill_color $o
set_current_color{show}{pop}ifelse}ifelse}ifelse}ifelse}ifelse $sdf{$dsf $dsa
$dsp @ss}if setmatrix}bd/@st{matrix currentmatrix exch $SDF{$SCF $SCA $SCP @ss}
if outl_color $O set_current_color{{currentpoint 3 -1 roll(0)dup 3 -1 roll 0
exch put dup @gs true charpath $ctm setmatrix $ptm concat stroke @gr @np
stringwidth pop 3 -1 roll add exch m}forall}{pop}ifelse $SDF{$dsf $dsa $dsp
@ss}if setmatrix}bd/@te{@ft}bd/@tr{@st}bd/@ta{dup @gs @ft @gr @st}bd/@t@a{dup
@gs @st @gr @ft}bd/@tm{@sm concat}bd/e{/t{@te}def}bd/r{/t{@tr}def}bd/o{/t{pop}
def}bd/a{/t{@ta}def}bd/@a{/t{@t@a}def}bd/t{@te}def/T{@np $ctm setmatrix/$ttm
matrix def}bd/ddt{t}def/@t{/$stm $stm currentmatrix def 3 1 roll m $ttm concat
ddt $stm setmatrix}bd/@n{/$ttm exch matrix rotate def}bd/@s{}bd/@l{}bd
/_lineorientation 0 def/_bitfont null def/_bitlobyte 0 def/_bitkey null def
/_bithibyte 0 def
% Copyright (c)1992-2005 Corel Corporation
% All rights reserved.     v13 r0.0
/@ii{concat 3 index 3 index m 3 index 1 index l 2 copy l 1 index 3 index l 3
index 3 index l clip pop pop pop pop}bd/@i{@sm @gs @ii 6 index 1 ne{/$frg true
def pop pop}{1 eq{bmp_fill_fg_color $O set_current_color/$frg xd}{/$frg false
def}ifelse 1 eq{@gs $ctm setmatrix F @gr}if}ifelse @np/$ury xd/$urx xd/$lly xd
/$llx xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul 8 div ceiling cvi string
def $bkg $frg or{$SDF{$SCF $SCA $SCP @ss}if $llx $lly Tl $urx $llx sub $ury
$lly sub scale $bkg{fill_color set_current_color pop}if $wid $hei abs $bts 1 eq
{$bkg}{$bts}ifelse[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse]/tcc load $bts
1 eq{imagemask}{image}ifelse $SDF{$dsf $dsa $dsp @ss}if}{$hei abs{tcc pop}
repeat}ifelse @gr $ctm setmatrix}bd/@I{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd
/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd $ngx $llx $lly Tl $urx $llx sub $ury
$lly sub scale $wid $hei abs $bts[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}ifelse
]/$dat $wid $bts mul $ncl mul 8 div ceiling cvi string def $msimage false eq
$ncl 1 eq or{/@cc load false $ncl ColorImage}{$wid $bts mul 8 div ceiling cvi
$ncl 3 eq{dup dup/$dat1 exch string def/$dat2 exch string def/$dat3 exch string
def/@cc1 load/@cc2 load/@cc3 load}{dup dup dup/$dat1 exch string def/$dat2 exch
string def/$dat3 exch string def/$dat4 exch string def/@cc1 load/@cc2 load
/@cc3 load/@cc4 load}ifelse true $ncl ColorImage}ifelse $SDF{$dsf $dsa $dsp
@ss}if @gr $ctm setmatrix}bd/@cc1{currentfile $dat1 readhexstring pop}bd/@cc2{
currentfile $dat2 readhexstring pop}bd/@cc3{currentfile $dat3 readhexstring pop
}bd/@cc4{currentfile $dat4 readhexstring pop}bd/$msimage false def/COMP 0 def
/MaskedImage false def/bImgDeviceN false def/nNumInksDeviceN 0 def
/sNamesDeviceN[]def/tint_params[]def level2{/@I_2{@sm @gs @ii @np/$ury xd/$urx
xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul
8 div ceiling cvi string def $ngx $ncl 1 eq{/DeviceGray}{$ncl 3 eq{/DeviceRGB}
{/DeviceCMYK}ifelse}ifelse setcolorspace $llx $lly Tl $urx $llx sub $ury $lly
sub scale 8 dict begin/ImageType 1 def/Width $wid def/Height $hei abs def
/BitsPerComponent $bts def/Decode $ncl 1 eq{[0 1]}{$ncl 3 eq{[0 1 0 1 0 1]}{[0
1 0 1 0 1 0 1]}ifelse}ifelse def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt
{$hei}{0}ifelse]def/DataSource currentfile/ASCII85Decode filter COMP 1 eq
{/DCTDecode filter}{COMP 2 eq{/RunLengthDecode filter}if}ifelse def currentdict
end image $SDF{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd}{/@I_2{}bd}ifelse
level2{/@I_2D{@sm @gs @ii @np/$ury xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd
/$hei xd/$wid xd $ngx/scanline $wid $bts mul $ncl mul 8 div ceiling cvi string
def/readscanline{currentfile scanline readhexstring pop}bind def level3{[
/DeviceN sNamesDeviceN/DeviceCMYK{tint_params CorelTintTransformFunction}]
setcolorspace $llx $lly Tl $urx $llx sub $ury $lly sub scale 8 dict begin
/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def
/Decode[nNumInksDeviceN{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0
gt{$hei}{0}ifelse]def/DataSource{readscanline}def currentdict end image}{
/scanline_height $lly $ury sub 1 sub $hei div def/plate_scanline $wid string
def/cmyk_scanline $wid 4 mul string def is_distilling is_rip_separation or{
/bSimDeviceN true def}{/bSimDeviceN false def}ifelse/scanline_img_dict 8 dict
begin/ImageType 1 def/Width $wid def/Height 1 def/BitsPerComponent $bts def
/Decode bSimDeviceN{[0 1]}{[0 1 0 1 0 1 0 1]}ifelse def/ImageMatrix[$wid 0 0 1
neg 0 1]def/DataSource bSimDeviceN{plate_scanline}{cmyk_scanline}ifelse def
currentdict end def 0 1 $hei 1 sub{@gs/nScanIndex exch def readscanline pop
/$t_lly $ury $lly scanline_height nScanIndex mul sub sub ceiling cvi def
/$t_ury $t_lly scanline_height sub ceiling cvi def bSimDeviceN{0 1 $ncl 1 sub{
@gs/nInkIndex exch def 0 1 plate_scanline length 1 sub{dup $ncl mul nInkIndex
add scanline exch get plate_scanline 3 1 roll put}for[0 1 $ncl 1 sub{nInkIndex
eq{1.0}{0.0}ifelse}for]/sepTintTransformParams exch def[/Separation
sNamesDeviceN nInkIndex get/DeviceCMYK{sepTintTransformParams aload pop
tint_params CorelTintTransformFunction @tc_5}]setcolorspace $llx $t_lly Tl $urx
$llx sub $t_ury $t_lly sub scale nInkIndex 0 eq currentoverprint not and{false
setoverprint}{true setoverprint}ifelse scanline_img_dict image @gr}for}{0 1
$wid 1 sub{dup $ncl mul scanline exch $ncl getinterval 0 1 $ncl 1 sub{2 copy
get 255 div 3 1 roll pop}for pop tint_params CorelTintTransformFunction 5 -1
roll cmyk_scanline exch 0 1 3{3 1 roll 2 copy 5 -1 roll dup 8 exch sub index
255 mul cvi 3 1 roll exch 4 mul add exch put}for 6 rp}for/DeviceCMYK
setcolorspace $llx $t_lly Tl $urx $llx sub $t_ury $t_lly sub scale
scanline_img_dict image}ifelse @gr}for}ifelse $SDF{$dsf $dsa $dsp @ss}if @gr
$ctm setmatrix}bd}{/@I_2D{}bd}ifelse/@I_3{@sm @gs @ii @np/$ury xd/$urx xd/$lly
xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/$dat $wid $bts mul $ncl mul 8 div
ceiling cvi string def $ngx bImgDeviceN{[/DeviceN sNamesDeviceN/DeviceCMYK{
tint_params CorelTintTransformFunction}]}{$ncl 1 eq{/DeviceGray}{$ncl 3 eq
{/DeviceRGB}{/DeviceCMYK}ifelse}ifelse}ifelse setcolorspace $llx $lly Tl $urx
$llx sub $ury $lly sub scale/ImageDataDict 8 dict def ImageDataDict begin
/ImageType 1 def/Width $wid def/Height $hei abs def/BitsPerComponent $bts def
/Decode[$ncl{0 1}repeat]def/ImageMatrix[$wid 0 0 $hei neg 0 $hei 0 gt{$hei}{0}
ifelse]def/DataSource currentfile/ASCII85Decode filter COMP 1 eq{/DCTDecode
filter}{COMP 2 eq{/RunLengthDecode filter}if}ifelse def end/MaskedImageDict 7
dict def MaskedImageDict begin/ImageType 3 def/InterleaveType 3 def/MaskDict
ImageMaskDict def/DataDict ImageDataDict def end MaskedImageDict image $SDF
{$dsf $dsa $dsp @ss}if @gr $ctm setmatrix}bd/@SetMask{/$mbts xd/$mhei xd/$mwid
xd/ImageMaskDict 8 dict def ImageMaskDict begin/ImageType 1 def/Width $mwid def
/Height $mhei abs def/BitsPerComponent $mbts def/DataSource maskstream def
/ImageMatrix[$mwid 0 0 $mhei neg 0 $mhei 0 gt{$mhei}{0}ifelse]def/Decode[1 0]
def end}bd/@daq{dup type/arraytype eq{{}forall}if}bd/@BMP{/@cc xd UseLevel 3 eq
MaskedImage true eq and{7 -2 roll pop pop @I_3}{12 index 1 gt UseLevel 2 eq
UseLevel 3 eq or and{7 -2 roll pop pop bImgDeviceN{@I_2D}{@I_2}ifelse}{11 index
1 eq{12 -1 roll pop @i}{7 -2 roll pop pop @I}ifelse}ifelse}ifelse}bd
/disable_raster_output{/@BMP load/old_raster_func exch bind def/@BMP{8 rp/$ury
xd/$urx xd/$lly xd/$llx xd/$ncl xd/$bts xd/$hei xd/$wid xd/scanline $wid $bts
mul $ncl mul 8 div ceiling cvi string def 0 1 $hei 1 sub{currentfile scanline
readhexstring pop pop pop}for}def}bd/enable_raster_output{/old_raster_func
where{pop/old_raster_func load/@BMP exch bd}if}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel3Dict begin
@BeginSysCorelDict
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 0 1 1 0
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
-7.50841 -4.07424 187.79159 167.77587 @E
/$fm 1 def
 0 O 0 @g
[ 1.00 0.00 0.00 0.00 1.00 null ] set_fill_color
172.91650 162.00085 m
187.44151 44.75083 l
187.55830 43.46731 187.64561 42.33005 187.70400 41.33820 c
187.76239 40.34665 187.79159 39.50079 187.79159 38.80063 c
187.79159 36.11735 187.23742 34.22154 186.12907 33.11320 c
185.02072 32.00485 182.77483 31.04249 179.39169 30.22583 c
108.69165 14.47569 L
108.69165 13.65902 108.04989 12.72586 106.76665 11.67562 c
105.48312 10.62567 104.19987 10.10069 102.91663 10.10069 c
100.69994 10.10069 98.83332 10.53836 97.31650 11.41313 c
95.79997 12.28819 94.92491 13.36734 94.69162 14.65087 C
20.66655 -0.04932 l
20.08318 -0.16583 19.61660 -0.25342 19.26652 -0.31181 c
18.91672 -0.37020 18.68315 -0.39912 18.56665 -0.39912 c
17.74998 -0.39912 16.99172 0.09666 16.29156 1.08822 c
15.59169 2.08006 15.12482 3.27572 14.89153 4.67575 c
0.36652 129.80069 l
0.36652 130.15077 0.33732 130.64655 0.27921 131.28831 c
0.22082 131.92980 0.19162 132.36746 0.19162 132.60076 c
0.19162 135.05074 1.99984 136.62567 5.61657 137.32583 c
84.89169 154.82580 L
86.29143 152.37581 87.74986 151.15068 89.26668 151.15068 c
90.54992 151.15068 91.94995 151.67565 93.46649 152.72561 C
156.81657 166.02576 l
161.94983 167.19250 165.04157 167.77587 166.09153 167.77587 c
170.05833 167.77587 172.33313 165.85087 172.91650 162.00085 c
@c
100.64154 132.95083 m
98.89143 143.62583 L
91.71666 133.30063 L
92.06646 130.85065 L
94.75002 132.25068 97.60819 132.95083 100.64154 132.95083 C
@c
113.24154 131.20072 m
113.24154 133.88400 111.72501 135.22564 108.69165 135.22564 c
108.57487 135.22564 108.04989 135.05074 107.11644 134.70066 c
106.18328 134.35087 105.33742 134.00079 104.57915 133.65071 c
103.82060 133.30063 103.79169 133.12573 104.49156 133.12573 c
105.54151 133.12573 L
106.94154 133.12573 l
108.92494 133.12573 111.02485 132.48397 113.24154 131.20072 C
@c
112.89146 127.17581 m
112.54167 127.99247 109.50831 128.40066 103.79169 128.40066 C
104.14148 126.30076 L
106.35817 125.01751 107.81660 124.37575 108.51647 124.37575 c
110.49987 124.37575 111.95830 125.30920 112.89146 127.17581 C
@c
86.29143 127.87569 m
83.95824 127.87569 81.91644 127.35071 80.16661 126.30076 c
78.41650 125.25080 77.54145 123.79238 77.54145 121.92576 c
77.54145 121.22561 77.77502 121.05071 78.24161 121.40079 c
78.70819 121.75087 79.34995 122.33395 80.16661 123.15061 c
80.98328 123.96728 81.91644 124.84233 82.96668 125.77578 c
84.01663 126.70894 85.12498 127.40910 86.29143 127.87569 C
@c
87.51657 120.70063 m
87.34167 123.15061 L
86.99159 123.15061 86.43742 122.91732 85.67915 122.45074 c
84.92088 121.98416 84.19153 121.42998 83.49165 120.78822 c
82.79150 120.14646 82.15002 119.47578 81.56665 118.77562 c
80.98328 118.07575 80.69159 117.55077 80.69159 117.20069 C
83.84145 117.20069 86.11654 118.36743 87.51657 120.70063 C
@c
114.11660 44.57565 m
175.36649 57.87581 L
162.94167 158.50063 L
101.51660 144.67578 L
102.91663 134.70066 L
104.66646 136.10069 106.53335 136.80085 108.51647 136.80085 c
112.83335 136.80085 114.99165 134.75906 114.99165 130.67575 c
114.99165 125.42570 112.77496 122.80082 108.34157 122.80082 c
107.64170 122.80082 106.29978 123.38419 104.31666 124.55065 C
111.31654 72.75061 L
112.48328 74.26743 114.05820 75.02570 116.04161 75.02570 c
117.90822 75.02570 119.45395 74.50072 120.67909 73.45077 c
121.90394 72.40082 122.51650 71.05918 122.51650 69.42586 c
122.51650 66.97587 121.90394 65.05087 120.67909 63.65083 c
119.45395 62.25080 117.90822 61.55065 116.04161 61.55065 c
114.75836 61.55065 113.53323 62.30920 112.36649 63.82573 C
114.11660 44.57565 L
@c
108.86655 71.52576 m
101.16652 128.05087 L
97.54980 128.05087 94.75002 127.52561 92.76661 126.47565 C
99.59159 69.42586 L
101.69150 70.82589 104.78324 71.52576 108.86655 71.52576 C
@c
35.01666 27.60066 m
97.31650 40.02576 L
95.39150 57.00076 L
93.99146 54.78406 92.06646 53.67572 89.61647 53.67572 c
88.09994 53.67572 86.78750 54.17150 85.67915 55.16334 c
84.57080 56.15490 84.01663 57.58413 84.01663 59.45074 c
84.01663 64.70079 87.45817 67.32567 94.34154 67.32567 C
87.86665 118.95080 L
86.34983 116.85061 83.89984 115.80066 80.51669 115.80066 c
77.48334 115.80066 75.96652 117.84246 75.96652 121.92576 c
75.96652 124.25896 76.89997 126.12586 78.76658 127.52561 c
80.63320 128.92564 83.02479 129.62580 85.94164 129.62580 C
84.01663 144.85068 L
22.41666 131.72570 L
35.01666 27.60066 L
@c
25.56652 15.17584 m
33.44145 26.37581 L
21.01663 130.67575 L
13.84157 121.57569 L
25.56652 15.17584 L
@c
120.94157 69.42586 m
120.94157 70.35902 120.47499 71.29247 119.54154 72.22564 c
118.60809 73.15909 117.61654 73.62567 116.56658 73.62567 c
113.76652 73.62567 112.13320 72.86740 111.66661 71.35087 C
115.51663 71.35087 118.60809 70.70910 120.94157 69.42586 C
@c
119.71644 65.40066 m
117.26646 66.56740 114.75836 67.15077 112.19159 67.15077 C
112.36649 65.57584 l
112.48328 64.75918 113.06665 64.14661 114.11660 63.73814 c
115.16655 63.32995 115.80831 63.12586 116.04161 63.12586 c
117.55814 63.12586 118.78328 63.88413 119.71644 65.40066 C
@c
93.11669 65.57584 m
91.13329 65.57584 89.38318 65.05087 87.86665 64.00063 c
86.34983 62.95068 85.59156 61.60904 85.59156 59.97572 c
85.59156 58.92576 85.70835 58.48838 85.94164 58.66328 c
86.17493 58.83817 86.61231 59.33395 87.25408 60.15061 c
87.89584 60.96756 88.68331 61.90072 89.61647 62.95068 c
90.54992 64.00063 91.71666 64.87569 93.11669 65.57584 C
@c
95.21660 58.92576 m
95.04170 61.90072 L
94.57483 61.90072 93.99146 61.60904 93.29159 61.02567 c
92.59143 60.44230 91.89156 59.77162 91.19169 59.01335 c
90.49153 58.25480 89.87896 57.46734 89.35398 56.65068 c
88.82901 55.83402 88.56652 55.25065 88.56652 54.90085 C
89.85005 54.90085 91.27899 55.39663 92.85420 56.38819 c
94.42913 57.38003 95.21660 58.22589 95.21660 58.92576 c
@c
104.14148 29.70085 m
112.36649 43.87578 L
109.56671 67.15077 L
104.43317 67.15077 101.34170 66.33411 100.29146 64.70079 C
104.14148 29.70085 L
@c
164.51660 42.47575 m
174.49143 55.60072 L
114.11660 42.47575 L
105.36661 28.65090 L
164.51660 42.47575 L
@c
90.49153 27.25087 m
97.31650 38.10076 L
34.66658 25.67565 L
26.79165 14.65087 L
90.49153 27.25087 L
@c
97.84148 138.20060 m
98.54164 133.65071 L
97.31650 133.47581 L
96.61663 136.97575 L
97.84148 138.20060 L
@c
94.86652 134.52576 m
95.04170 133.12573 L
93.99146 132.77565 L
93.64167 133.65071 L
94.86652 134.52576 L
@c
74.04151 110.72580 m
74.04151 109.15087 L
40.26671 102.32561 L
40.09153 103.37584 L
74.04151 110.72580 L
@c
74.91657 105.65065 m
74.91657 104.25061 L
40.96658 97.25074 L
40.79169 98.30069 L
74.91657 105.65065 L
@c
34.66658 102.32561 m
35.19156 98.82567 L
31.86652 98.12580 L
31.34154 101.80063 L
34.66658 102.32561 L
@c
99.06661 127.00063 m
106.06649 72.40082 L
105.19143 72.22564 L
98.01666 126.82573 L
99.06661 127.00063 L
@c
95.91647 126.65083 m
102.56655 71.35087 L
101.51660 71.17569 L
95.04170 126.30076 L
95.91647 126.65083 L
@c
75.61644 99.17575 m
75.61644 97.95061 L
41.84164 90.95074 L
41.49156 92.00069 L
75.61644 99.17575 L
@c
76.49150 94.27578 m
76.49150 92.87575 L
42.71669 85.87587 L
42.54151 86.92583 L
76.49150 94.27578 L
@c
36.24151 91.12564 m
36.76649 87.45080 L
33.44145 86.75065 L
32.91647 90.42576 L
36.24151 91.12564 L
@c
77.19165 85.70069 m
77.19165 84.30066 L
43.41657 77.30079 L
43.24167 78.35074 L
77.19165 85.70069 L
@c
78.24161 80.62583 m
78.24161 79.22580 L
44.11644 72.22564 L
43.94154 73.27587 L
78.24161 80.62583 L
@c
37.64154 77.47569 m
38.34170 73.80085 L
35.01666 73.10069 L
34.49169 76.77581 L
37.64154 77.47569 L
@c
19.61660 125.77578 m
30.99146 25.67565 L
30.11669 24.62570 L
18.74154 124.20085 L
19.61660 125.77578 L
@c
16.99172 122.45074 m
28.19169 22.35090 L
27.31663 20.60079 L
16.11666 121.05071 L
16.99172 122.45074 L
@c
78.76658 73.62567 m
78.76658 72.22564 L
44.81660 65.22576 L
44.64170 66.27572 L
78.76658 73.62567 L
@c
79.64164 68.55080 m
79.64164 67.32567 L
45.86655 60.32580 L
45.69165 61.20085 L
79.64164 68.55080 L
@c
39.39165 65.40066 m
39.91663 61.72583 L
36.59159 61.20085 L
36.06661 64.70079 L
39.39165 65.40066 L
@c
80.86649 58.92576 m
80.86649 57.70063 L
47.09169 50.70076 L
46.91650 51.57581 L
80.86649 58.92576 L
@c
107.29162 65.40066 m
109.74161 43.35080 L
108.86655 41.25061 L
105.89159 65.22576 L
107.29162 65.40066 L
@c
81.74154 54.02580 m
81.74154 52.62576 L
47.79156 45.62589 L
47.61666 46.67584 L
81.74154 54.02580 L
@c
103.26671 64.70079 m
106.41657 37.05080 L
105.54151 35.12580 L
102.21647 64.35071 L
103.26671 64.70079 L
@c
41.31666 50.87565 m
42.01654 47.20082 L
38.69150 46.50066 L
38.16652 50.17578 L
41.31666 50.87565 L
@c
114.11660 39.32589 m
169.24167 51.75071 L
168.01654 50.52586 L
113.06665 37.57578 L
114.11660 39.32589 L
@c
110.96646 33.72576 m
165.04157 45.97569 L
163.99162 44.40076 L
109.91650 32.67581 L
110.96646 33.72576 L
@c
35.19156 23.40085 m
93.81657 35.12580 L
92.41654 33.55087 L
33.96671 22.00082 L
35.19156 23.40085 L
@c
32.21660 19.02586 m
91.19169 30.92570 L
90.31663 29.52567 L
31.16665 17.62583 L
32.21660 19.02586 L
@c
163.11657 126.30076 m
159.96643 125.42570 L
160.49169 121.75087 L
163.81644 122.27584 L
163.11657 126.30076 L
@c
157.16665 124.55065 m
157.16665 123.15061 L
123.21666 116.15074 L
123.04148 117.20069 L
157.16665 124.55065 L
@c
158.04170 119.47578 m
158.04170 118.25065 L
124.09143 111.25077 L
123.91654 112.30072 L
158.04170 119.47578 L
@c
164.86668 115.27569 m
161.71654 114.40063 L
162.24151 110.72580 L
165.56655 111.42567 L
164.86668 115.27569 L
@c
158.91647 113.52586 m
158.91647 112.30072 L
124.96649 105.30085 L
124.79159 106.17562 L
158.91647 113.52586 L
@c
159.79153 108.62561 m
159.79153 107.22586 L
126.01644 100.22570 L
125.84154 101.27565 L
159.79153 108.62561 L
@c
166.44161 104.25061 m
163.29146 103.37584 L
163.81644 99.70072 L
166.96658 100.40088 L
166.44161 104.25061 L
@c
160.49169 102.50079 m
160.49169 101.27565 L
126.54170 94.27578 L
126.36652 95.32573 L
160.49169 102.50079 L
@c
161.36646 97.60082 m
161.36646 96.20079 L
127.41647 89.20063 L
127.24157 90.25087 L
161.36646 97.60082 L
@c
168.19143 93.22583 m
165.04157 92.17587 L
165.56655 88.50076 L
168.71669 89.55071 L
168.19143 93.22583 L
@c
162.24151 91.65061 m
162.24151 90.25087 L
128.29153 83.25071 L
128.11663 84.30066 L
162.24151 91.65061 L
@c
163.11657 86.57575 m
163.11657 85.17572 L
129.34148 78.35074 L
129.16658 79.22580 L
163.11657 86.57575 L
@c
170.11644 78.52564 m
166.96658 77.65087 L
167.49156 73.97575 L
170.81660 74.85080 L
170.11644 78.52564 L
@c
164.16652 76.95071 m
164.16652 75.55068 L
130.21654 68.55080 L
130.04164 69.60076 L
164.16652 76.95071 L
@c
165.04157 71.87584 m
165.04157 70.47581 L
131.09159 63.65083 L
130.91669 64.52589 L
165.04157 71.87584 L
@c
40.26671 132.25068 m
43.99994 132.25068 45.86655 130.61735 45.86655 127.35071 c
45.86655 126.53405 45.25398 125.54249 44.02913 124.37575 c
42.80400 123.20901 41.46236 121.98416 40.00422 120.70063 c
38.54580 119.41739 37.20416 118.25065 35.97902 117.20069 c
34.75417 116.15074 34.14161 115.27569 34.14161 114.57581 C
35.77493 115.74227 37.29146 116.32564 38.69150 116.32564 c
39.15836 116.32564 40.12072 116.26753 41.57915 116.15074 c
43.03729 116.03395 44.05833 115.97584 44.64170 115.97584 c
45.57487 115.97584 46.04145 117.37587 46.04145 120.17565 C
47.61666 120.52573 L
47.61666 118.07575 l
47.61666 116.32564 47.03329 114.86750 45.86655 113.70076 c
44.69981 112.53402 43.18328 111.95065 41.31666 111.95065 c
40.84980 111.95065 40.00422 112.24233 38.77909 112.82570 c
37.55395 113.40907 36.70838 113.70076 36.24151 113.70076 c
35.07506 113.70076 34.34570 113.61317 34.05402 113.43827 c
33.76233 113.26337 33.70422 113.05899 33.87912 112.82570 c
34.05402 112.59241 34.31650 112.35912 34.66658 112.12583 c
35.01666 111.89254 35.19156 111.71735 35.19156 111.60085 c
35.19156 110.66740 34.66658 110.20082 33.61663 110.20082 c
32.21660 110.20082 31.51672 110.90069 31.51672 112.30072 c
31.51672 113.00088 31.98331 114.02164 32.91647 115.36328 c
33.84992 116.70491 34.89987 118.13414 36.06661 119.65068 c
37.23335 121.16750 38.28331 122.56753 39.21647 123.85077 c
40.14992 125.13402 40.61650 126.06746 40.61650 126.65083 c
40.61650 128.98403 39.56655 130.15077 37.46665 130.15077 c
36.29991 130.15077 35.19156 129.82989 34.14161 129.18813 c
33.09165 128.54665 32.56668 127.81729 32.56668 127.00063 c
32.56668 126.41754 32.71238 126.15477 33.00406 126.21317 c
33.29575 126.27156 33.61663 126.30076 33.96671 126.30076 c
35.24995 126.30076 35.89172 125.54249 35.89172 124.02567 c
35.89172 122.50913 34.78337 121.75087 32.56668 121.75087 c
30.58328 121.75087 29.59172 123.03411 29.59172 125.60060 c
29.59172 127.35071 30.64167 128.89644 32.74157 130.23836 c
34.84148 131.58000 37.34986 132.25068 40.26671 132.25068 c
@c
153.31663 153.42576 m
157.39994 153.42576 159.44145 151.67565 159.44145 148.17572 c
159.44145 147.24227 158.85836 146.22151 157.69162 145.11317 c
156.52488 144.00482 155.76661 143.45065 155.41654 143.45065 C
157.28315 143.45065 158.82917 142.95487 160.05402 141.96331 c
161.27915 140.97146 161.89143 139.77581 161.89143 138.37578 c
161.89143 136.50917 160.95827 134.84665 159.09165 133.38822 c
157.22476 131.92980 155.18324 131.20072 152.96655 131.20072 c
151.09994 131.20072 149.55392 131.75490 148.32907 132.86324 c
147.10394 133.97159 146.49165 135.40082 146.49165 137.15065 c
146.49165 137.85080 146.81254 138.52148 147.45402 139.16324 c
148.09578 139.80501 148.76646 140.12561 149.46661 140.12561 c
150.16649 140.12561 150.80825 139.86312 151.39162 139.33814 c
151.97499 138.81317 152.26668 138.25899 152.26668 137.67562 c
152.26668 137.09254 152.03310 136.50917 151.56652 135.92580 c
151.09994 135.34243 150.57496 135.05074 149.99159 135.05074 C
150.57496 133.88400 151.50813 133.30063 152.79165 133.30063 c
155.47493 133.30063 156.81657 134.87584 156.81657 138.02570 c
156.81657 139.19244 156.49569 140.15480 155.85392 140.91335 c
155.21244 141.67162 154.48309 142.05061 153.66643 142.05061 c
153.43313 142.05061 153.11254 142.02170 152.70406 141.96331 c
152.29559 141.90491 151.79981 141.81732 151.21644 141.70082 C
151.04154 143.45065 L
153.72482 143.80072 155.06646 144.96746 155.06646 146.95087 c
155.06646 148.11732 154.74586 149.13836 154.10409 150.01313 c
153.46233 150.88819 152.73326 151.32586 151.91660 151.32586 c
150.28328 151.32586 149.29143 151.15068 148.94164 150.80060 c
148.59156 150.45080 148.56236 150.01313 148.85405 149.48816 c
149.14573 148.96318 149.52501 148.46740 149.99159 148.00082 c
150.45817 147.53395 150.69146 147.18416 150.69146 146.95087 c
150.69146 145.20076 149.81669 144.32570 148.06658 144.32570 c
146.54976 144.32570 145.79150 145.37565 145.79150 147.47584 c
145.79150 149.22567 146.54976 150.65490 148.06658 151.76324 c
149.58312 152.87159 151.33323 153.42576 153.31663 153.42576 c
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel3Dict 3.0 0
%%DocumentNeededResources: font AimsinyourLifenormal
%%EOF
